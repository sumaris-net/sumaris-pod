/*
 * #%L
 * SUMARiS
 * %%
 * Copyright (C) 2019 SUMARiS Consortium
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.html>.
 * #L%
 */

// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: hibernate/HibernateEntity.vsl in andromda-hibernate-cartridge.
//
package net.sumaris.core.model.data;

import lombok.*;
import lombok.ToString;
import lombok.experimental.FieldNameConstants;
import net.sumaris.core.model.IEntity;
import net.sumaris.core.model.referential.QualityFlag;
import net.sumaris.core.model.referential.pmfm.Method;
import net.sumaris.core.model.referential.taxon.ReferenceTaxon;
import net.sumaris.core.model.referential.taxon.TaxonGroup;
import org.hibernate.annotations.Cascade;

import javax.persistence.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * Table technique mettant "à plat" les informations utiles de la table BATCH, a des fins
 * d'optimisation de l'exploitation de ces données.
 * Des champs additionnels sont également calculés dans cette table.
 * ATTENTION : Table technique. (RAZ des données possible).
 * Elle est remplie par le traitement de dénormalisation des lots.
 */
@Getter
@Setter
@FieldNameConstants
@Entity
@Table(name = "denormalized_batch")
public class DenormalizedBatch  implements IEntity<Integer> {

    @Id
    private Integer id;

    @Column(length = 40)
    private String label;

    @Column(name = "rank_order", nullable = false)
    private Integer rankOrder;

    @Column(name = "flat_rank_order", nullable = false)
    private Short flatRankOrder;

    @Column(name = "weight")
    private Double weight;

    @Column(name = "indirect_weight")
    private Double indirectWeight;

    @Column(name = "elevate_context_weight")
    private Double elevateContextWeight;

    @Column(name = "indirect_context_weight")
    private Double indirectContextWeight;

    @Column(name = "elevate_weight")
    private Double elevateWeight;

    @Column(name = "individual_count")
    private Integer individualCount;

    // TODO add subgroup_count ?

    @Column(name = "indirect_individual_count")
    private Integer indirectIndividualCount;

    @Column(name = "elevate_individual_count")
    private Integer  elevateIndividualCount;

    @Column(name = "sampling_ratio")
    private Double samplingRatio;

    @Column(name = "sampling_ratio_text", length = 50)
    private String samplingRatioText;

    @Column(name = "exhaustive_inventory")
    private Boolean exhaustiveInventory;

    @Column(length = IDataEntity.LENGTH_COMMENTS)
    private String comments;

    @Column(name = "tree_level", nullable = false)
    private Short treeLevel;

    @Column(name = "tree_indent", length = 256)
    private String treeIndent;

    @Column(name = "sorting_values_text", length = 255)
    private String sortingValuesText;

    @Column(name = "is_landing", nullable = false)
    private Boolean isLanding;

    @Column(name = "is_discard", nullable = false)
    private Boolean isDiscard;

    @Column(name = "update_date", nullable = false)
    @Temporal(TemporalType.TIMESTAMP)
    private Date updateDate;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "weight_method_fk")
    private Method weightMethod;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "quality_flag_fk", nullable = false)
    private QualityFlag qualityFlag;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "inherited_taxon_group_fk")
    private TaxonGroup inheritedTaxonGroup;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "calculated_taxon_group_fk")
    private TaxonGroup calculatedTaxonGroup;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "taxon_group_fk")
    private TaxonGroup taxonGroup;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "inherited_reference_taxon_fk")
    private ReferenceTaxon inheritedReferenceTaxon;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "reference_taxon_fk")
    private ReferenceTaxon referenceTaxon;

    @OneToMany(fetch = FetchType.LAZY, targetEntity = DenormalizedBatch.class, mappedBy = Fields.PARENT)
    @Cascade(org.hibernate.annotations.CascadeType.DELETE)
    private List<DenormalizedBatch> children = new ArrayList<>();

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "parent_batch_fk")
    @ToString.Exclude
    private DenormalizedBatch parent;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "operation_fk")
    @ToString.Exclude
    private Operation operation;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "sale_fk")
    @ToString.Exclude
    private Sale sale;

    @OneToMany(fetch = FetchType.LAZY, targetEntity = DenormalizedBatchSortingValue.class, mappedBy = DenormalizedBatchSortingValue.Fields.BATCH)
    @Cascade(org.hibernate.annotations.CascadeType.DELETE)
    private List<DenormalizedBatchSortingValue> sortingValues = new ArrayList<>();
}