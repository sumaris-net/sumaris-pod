/*
 * #%L
 * SUMARiS
 * %%
 * Copyright (C) 2019 SUMARiS Consortium
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.html>.
 * #L%
 */

// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: hibernate/HibernateEntity.vsl in andromda-hibernate-cartridge.
//
package net.sumaris.core.model.data;


import lombok.*;
import lombok.ToString;
import lombok.experimental.FieldNameConstants;
import net.sumaris.core.model.IEntity;
import net.sumaris.core.model.referential.pmfm.Parameter;
import net.sumaris.core.model.referential.pmfm.Pmfm;
import net.sumaris.core.model.referential.pmfm.QualitativeValue;
import net.sumaris.core.model.referential.pmfm.Unit;

import javax.persistence.*;

/**
 * Table technique stockant les critères de classement d'un lot, ainsi que les critères de
 * classement des lots père (par héritage).
 * ATTENTION : Table technique. (RAZ des données possible).
 * Elle est remplie par le traitement de dénormalisation des lots.
 */
@Getter
@Setter

@EqualsAndHashCode(onlyExplicitlyIncluded = true)
@FieldNameConstants
@Entity
@Table(name = "denormalized_batch_sort_val")
public class DenormalizedBatchSortingValue implements IEntity<Integer>
{
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "DENORMALIZED_BATCH_SORT_VA_SEQ")
    @SequenceGenerator(name = "DENORMALIZED_BATCH_SORT_VA_SEQ", sequenceName="DENORMALIZED_BATCH_SORT_VA_SEQ", allocationSize = IDataEntity.SEQUENCE_ALLOCATION_SIZE)
    
    @EqualsAndHashCode.Include
    private Integer id;

    @Column(name = "rank_order", nullable = false)
    private Integer rankOrder;

    @Column(name = "is_inherited", nullable = false)
    private Boolean isInherited;

    @Column(name = "numerical_value")
    private Double numericalValue;

    @Column(name = "alphanumerical_value", length = 40)
    private String alphanumericalValue;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "pmfm_fk", nullable = false)
    private Pmfm pmfm;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "qualitative_value_fk")
    private QualitativeValue qualitativeValue;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "batch_fk", nullable = false)
    @ToString.Exclude
    private DenormalizedBatch batch;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "parameter_fk", nullable = false)
    private Parameter parameter;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "unit_fk", nullable = false)
    private Unit unit;
}