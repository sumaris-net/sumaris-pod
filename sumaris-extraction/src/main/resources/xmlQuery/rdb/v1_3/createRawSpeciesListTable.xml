<?xml version="1.0" encoding="UTF-8"?>
<!--
  #%L
  Dali :: Core
  %%
  Copyright (C) 2017 Ifremer
  %%
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  
  You should have received a copy of the GNU Affero General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  #L%
  -->

<queries name="extractionCreateRawSpeciesListTable">

  <query type="create" temp="false" table="&amp;rawSpeciesListTableName">

    <!-- PK (inherited) -->
    <select alias="SAMPLING_TYPE" type="text">S.SAMPLING_TYPE</select>
    <select alias="LANDING_COUNTRY" type="text">S.LANDING_COUNTRY</select>
    <select alias="VESSEL_FLAG_COUNTRY" type="text">S.VESSEL_FLAG_COUNTRY</select>
    <select alias="YEAR" type="number">S.YEAR</select>
    <select alias="PROJECT" type="text">S.PROJECT</select>
    <select alias="TRIP_CODE" type="number">S.TRIP_CODE</select>
    <select alias="STATION_NUMBER" type="number">S.STATION_NUMBER</select>

    <!-- PK (new fields) -->
    <select alias="SPECIES" type="text">COALESCE(TG.COMMENTS, TG.NAME, TG.LABEL)</select>
    <injection name="afterSpeciesInjection" type="select" group="injectionPoint"/>
    <select alias="CATCH_CATEGORY" type="text"><![CDATA[
    (SELECT
        CASE QV.ID WHEN &discardQvId THEN UPPER('DIS') WHEN &landingQvId THEN UPPER('LAN') ELSE null END
      FROM SORTING_MEASUREMENT_B SM
        INNER JOIN QUALITATIVE_VALUE QV ON QV.ID=SM.QUALITATIVE_VALUE_FK
      WHERE SM.BATCH_FK = SORTING_B.ID and SM.PMFM_FK=&catchCategoryPmfmId
    )]]></select>
    <select alias="LANDING_CATEGORY" type="text">'HUC'</select>
    <select alias="COMMERCIAL_SIZE_CATEGORY_SCALE" type="text">
      MAX(CASE TG.LABEL WHEN 'NEP' THEN 'Nephrops' ELSE 'EU' END)
    </select>
    <select alias="COMMERCIAL_SIZE_CATEGORY" type="text">
    (SELECT
      QV.LABEL
      FROM SORTING_MEASUREMENT_B SM INNER JOIN QUALITATIVE_VALUE QV ON QV.ID=SM.QUALITATIVE_VALUE_FK
      WHERE SM.BATCH_FK = SORTING_B.ID and SM.PMFM_FK in (&amp;sizeCategoryPmfmIds)
    )</select>
    <select alias="SUBSAMPLING_CATEGORY" type="text">null</select> <!-- TODO: BATCH_SORTING (Vrac, Hors Vrac) -->
    <select alias="SEX" type="text">null</select><!-- always define in the HL table -->

    <!-- other fields -->
    <select alias="WEIGHT" group="weight" type="number"><![CDATA[COALESCE(
      (SELECT QM.NUMERICAL_VALUE FROM QUANTIFICATION_MEASUREMENT_B QM WHERE QM.BATCH_FK=SORTING_B.ID and QM.IS_REFERENCE_QUANTIFICATION=true),
      (CASE WHEN (SAMPLING_B.SAMPLING_RATIO IS NULL OR SAMPLING_B.SAMPLING_RATIO = 0) THEN NULL ELSE (SELECT QM.NUMERICAL_VALUE/SAMPLING_B.SAMPLING_RATIO FROM QUANTIFICATION_MEASUREMENT_B QM WHERE QM.BATCH_FK=SAMPLING_B.ID and QM.IS_REFERENCE_QUANTIFICATION=true) END)
      )]]>
    </select>
    <select alias="SUBSAMPLING_WEIGHT" group="weight" type="number"><![CDATA[COALESCE(
      (SELECT QM.NUMERICAL_VALUE FROM QUANTIFICATION_MEASUREMENT_B QM WHERE QM.BATCH_FK=SAMPLING_B.ID and QM.IS_REFERENCE_QUANTIFICATION=true),
      (SELECT QM.NUMERICAL_VALUE FROM QUANTIFICATION_MEASUREMENT_B QM WHERE QM.BATCH_FK=SORTING_B.ID and QM.IS_REFERENCE_QUANTIFICATION=true)
      )]]>
    </select>

    <!-- TODO get precision from PMFM (unit + maxDecimals) ? -->
    <select alias="LENGTH_CODE" type="text">'cm'</select>

    <!-- Permet la répartition par taxons/length code, sous l'espèce commerciale - calculé a partir des RTP (cf Baudroie dans ADAP) -->
    <select alias="SUBSAMPLING_RATIO" type="number">1</select>

    <!-- need to link other tables -->
    <select alias="SAMPLE_ID" type="number">COALESCE(SAMPLING_B.ID, SORTING_B.ID)</select>
    <select alias="SAMPLE_RANK_ORDER" type="hidden">SORTING_B.RANK_ORDER</select>
    <select alias="REFERENCE_TAXON_ID" type="hidden">SPECIE_B.REFERENCE_TAXON_FK</select>

    <from alias="S">&amp;stationTableName</from>
    <from join="true">INNER JOIN BATCH CATCH_B ON CATCH_B.OPERATION_FK = S.STATION_NUMBER AND CATCH_B.PARENT_BATCH_FK IS NULL</from>
    <from join="true">INNER JOIN BATCH SPECIE_B ON SPECIE_B.PARENT_BATCH_FK  = CATCH_B.ID</from>
    <from join="true">INNER JOIN TAXON_GROUP TG ON TG.ID = SPECIE_B.TAXON_GROUP_FK</from>
    <from join="true">INNER JOIN BATCH SORTING_B ON SORTING_B.PARENT_BATCH_FK = SPECIE_B.ID</from>
    <from join="true">LEFT OUTER JOIN BATCH SAMPLING_B ON SAMPLING_B.PARENT_BATCH_FK = SORTING_B.ID AND SAMPLING_B.LABEL LIKE UPPER('SORTING_BATCH#%')</from>

    <where>1=1</where>
    <!-- 'OR IS NULL' is needed for postgresql -->
    <where operator="AND" group="excludeInvalidStation"><![CDATA[S.FISHING_VALIDITY != UPPER('I') OR S.FISHING_VALIDITY IS NULL ]]></where>

    <groupby>&amp;groupByColumns</groupby>

    <orderby>STATION_NUMBER ASC, SAMPLE_RANK_ORDER ASC</orderby>

  </query>

</queries>
