# ---------------------------------------------------------------
# Global
# ---------------------------------------------------------------

# default image
image: jlrigau/maven-git

# stages (main steps of pipeline)
stages:
    - build
    - alt_build
    - test
    - release
    - docker
    - publish
    - docs

# ---------------------------------------------------------------
# Global variables
# ---------------------------------------------------------------

variables:
    DOCKER_DRIVER: overlay2
    ANSIBLE_FORCE_COLOR: '1'
    CI_BUILD_IMAGE: $CI_REGISTRY_IMAGE/build:develop
    #CONTAINER_SNAPSHOT_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    CONTAINER_SNAPSHOT_IMAGE: $CI_REGISTRY_IMAGE:develop
    MAVEN_LOCAL_REPO: /root/.m2/repository/
    MAVEN_REPO_URL: https://gitlab.ifremer.fr/api/v4/projects/1272/packages/maven
    APP_SHARED_MODULE: sumaris-core-shared
    APP_CORE_MODULE: sumaris-core
    APP_DB_MODULE: sumaris-db
    APP_WAR_MODULE: sumaris-server
    ARTIFACT_WAR_FILE: "${APP_WAR_MODULE}/target/*.war"
    ARTIFACT_CONFIG_FILES: "${APP_WAR_MODULE}/target/classes/*.properties"
    ENV_FILE: target/variables.env

# ---------------------------------------------------------------
# Jobs templates
# ---------------------------------------------------------------

.docker:
    image: docker:latest
    tags: [sih_public_runner]
    services:
        - docker:dind
    before_script:
        - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    after_script:
        - docker logout ${CI_REGISTRY}
    allow_failure: false

# ---------------------------------------------------------------
# Build jobs
# ---------------------------------------------------------------

.build:
    stage: build
    tags: [sih_public_runner]
    script:
        - echo "Building from sources..."
        - mvn clean install -s ./ci_settings.xml -q -DskipTests
    after_script:
        # Get project version
        - mkdir -p target
        - APP_VERSION=$(mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout --non-recursive)
        - echo "APP_VERSION=${APP_VERSION}" > ${ENV_FILE}
    environment:
        name: test
    artifacts:
        paths:
            - ${ARTIFACT_WAR_FILE}
            - ${ARTIFACT_CONFIG_FILES}
        reports:
            dotenv: ${ENV_FILE}
        expire_in: 72 hours

build:
    extends: .build
    image: ${CI_BUILD_IMAGE}
    only:
        - develop
        - feature/imagine
        - feature/imagine-569
        - tags

failsafe-build:
    extends: .build
    stage: alt_build
    when: on_failure
    only:
        - develop

docker:ci:
    extends: .docker
    stage: alt_build
    when: on_failure
    allow_failure: true
    script:
      # Create the target directory
      - mkdir -p target/ci
      # Create the Dockerfile
      - echo 'FROM tirrell/maven-git' > target/ci/Dockerfile
      - echo 'WORKDIR /tmp/.build-cache' >> target/ci/Dockerfile
      - echo 'COPY ./ ./' >> target/ci/Dockerfile
      - echo "RUN mkdir -p ${MAVEN_LOCAL_REPO}" >> target/ci/Dockerfile
      - echo "ENV MAVEN_LOCAL_REPO=${MAVEN_LOCAL_REPO}" >> target/ci/Dockerfile
      - echo 'RUN du -s `find ${MAVEN_LOCAL_REPO} -maxdepth 3 | egrep -v "^\.$"` > /tmp/before.txt' >> target/ci/Dockerfile
      - echo 'RUN mvn install -s ./ci_settings.xml -q -DskipTests' >> target/ci/Dockerfile
      - echo 'RUN mvn clean -s ./ci_settings.xml -q' >> target/ci/Dockerfile
      - echo 'RUN du -s `find ${MAVEN_LOCAL_REPO} -maxdepth 3 | egrep -v "^\.$"` > /tmp/after.txt' >> target/ci/Dockerfile
      - echo "RUN diff /tmp/before.txt /tmp/after.txt || true" >> target/ci/Dockerfile
      - echo 'WORKDIR /build' >> target/ci/Dockerfile
      # Build and push the CI image
      - docker build --pull -t ${CI_BUILD_IMAGE} -f target/ci/Dockerfile .
      - docker push ${CI_BUILD_IMAGE}
    only:
        - develop
    artifacts:
        paths:
            - target/ci/Dockerfile
        expire_in: 72 hours

# ---------------------------------------------------------------
# Test jobs
# ---------------------------------------------------------------

# ---------------------------------------------------------------
# Tests jobs
# ---------------------------------------------------------------

.test:
    stage: test
    tags: [sih_public_runner]
    script:
        - mvn verify surefire-report:report -s ./ci_settings.xml -q
    environment:
        name: test
    artifacts:
        paths:
          - ${APP_SHARED_MODULE}/site/surefire-report.html
          - ${APP_SHARED_MODULE}/target/surefire-reports/*
          - ${ARTIFACT_CORE_MODULE}/site/surefire-report.html
          - ${ARTIFACT_CORE_MODULE}/target/surefire-reports/*
          - ${ARTIFACT_WAR_MODULE}/target/surefire-reports/*
          - ${ARTIFACT_WAR_MODULE}/site/surefire-report.html
        expire_in: 72 hours

test:
    extends: .test
    image: ${CI_BUILD_IMAGE}
    rules:
      - if: $CI_COMMIT_TAG
        when: never
      - if: '$CI_MERGE_REQUEST_ID || $CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH =~ /^feature/'
        when: manual
    allow_failure: true

sonarqube:
    stage: test
    tags:
        - sih_public_runner
    variables:
        SONAR_TOKEN: "e6f816eee72d3d5c03319ec74b468157b9164d12"
        SONAR_HOST_URL: http://visi-common-sonar.ifremer.fr:9000
    image:
        name: sonarsource/sonar-scanner-cli:latest
        entrypoint: [""]
    script:
        - echo "Sonarqube analysis in progress"
        - sonar-scanner
            -Dsonar.projectKey=imagine-pod
            -Dsonar.host.url=$SONAR_HOST_URL
            -Dsonar.login=$SONAR_TOKEN
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.java.binaries=.
            -Dsonar.java.libraries=.
    only:
        - develop
    when: manual

# ---------------------------------------------------------------
# Release jobs
# ---------------------------------------------------------------

.release:
  stage: release
  tags: [sih_public_runner]
  before_script:
    - git remote set-url origin ${CI_REPOSITORY_URL}
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git reset --hard develop
    - git fetch origin
  script:
    - cd src/scripts
    - ./release.sh pre ${RELEASE_VERSION}
#        - echo "Preparing release..."
#        - git branch -D release/$RELEASE_VERSION || true
#        - git pull origin develop && git checkout develop && git status
#        - mvn -s ./ci_settings.xml -B gitflow:release-start --batch-mode -DreleaseVersion="$RELEASE_VERSION"
#        - echo "Performing release..."
#        - mvn clean install -s ./ci_settings.xml --batch-mode -DperformRelease -DskipTests
#        - echo "Creating test DB..."
#        - mvn -pl ${APP_CORE_MODULE} -q -Prun,hsqldb -DskipTests --batch-mode
#        - cd ${APP_CORE_MODULE}/target && tar -cf "${APP_DB_MODULE}-${RELEASE_VERSION}.tar.gz" db && cd ../..
#        - echo "Pushing changes to upstream"
#        - git commit -a -m "Release $RELEASE_VERSION"
#        - git status
#        - mvn gitflow:release-finish
  after_script:
    - echo "APP_VERSION=${RELEASE_VERSION}" > ${ENV_FILE}
  artifacts:
    paths:
      - ${ARTIFACT_WAR_FILE}
      - ${ARTIFACT_CONFIG_FILES}
      - ${APP_WAR_MODULE}/target/*.tar.gz
      - ${APP_WAR_MODULE}/target/*.zip
    reports:
      dotenv: ${ENV_FILE}
  only:
    - develop
  when: manual

release:
    extends: .release
    image: ${CI_BUILD_IMAGE}
    needs:
        - build

failsafe-release:
    extends: .release
    needs:
        - failsafe-build

gitlab-release:
    stage: release
    tags: [sih_public_runner]
    image: registry.gitlab.com/gitlab-org/release-cli:latest
    script:
        - echo "running release for ${CI_COMMIT_TAG}"
    release:
        name: "Release ${CI_PROJECT_NAME}-${CI_COMMIT_TAG}"
        description: "Created using the release-cli $EXTRA_DESCRIPTION"
        tag_name: "${CI_COMMIT_TAG}"
        ref: "${CI_COMMIT_TAG}"
    only:
        - tags

# ---------------------------------------------------------------
# Docker jobs
# ---------------------------------------------------------------

.docker-build:
    extends: .docker
    stage: docker
    script:
        # Build variables: set default values
        - export IMAGE_USERID=${IMAGE_USERID:-20001}
        - export IMAGE_GROUPID=${IMAGE_GROUPID:-20001}
        # Create the target directory, to build the image
        - mkdir -p target/docker/config
        - cp -rf ${APP_WAR_MODULE}/src/main/docker/* target/docker/
        - cp -f ${ARTIFACT_WAR_FILE} target/docker/app.war
        - cp -f ${ARTIFACT_CONFIG_FILES} target/docker/config/
        - ls -l target/docker/config
        - cd target/docker
        # Build docker image
        - docker pull ${CI_REGISTRY_IMAGE}:${IMAGE_TAG} || true
        - docker build --cache-from ${CI_REGISTRY_IMAGE}:${IMAGE_TAG} --pull -t ${CI_REGISTRY_IMAGE}:${IMAGE_TAG} --build-arg="USERID=${IMAGE_USERID}" --build-arg="GROUPID=${IMAGE_GROUPID}" .
        #- docker build --no-cache -t ${CI_REGISTRY_IMAGE}:${IMAGE_TAG} --build-arg="USERID=${IMAGE_USERID}" --build-arg="GROUPID=${IMAGE_GROUPID}" .
        - docker push ${CI_REGISTRY_IMAGE}:${IMAGE_TAG}
    artifacts:
        paths:
            - target/docker
        expire_in: 72 hours

docker:develop:
    extends: .docker-build
    variables:
        IMAGE_TAG: 'develop'
    only:
        - develop

docker:imagine:
    extends: .docker-build
    variables:
        IMAGE_TAG: 'imagine'
    only:
        - feature/imagine
        - feature/imagine-569

docker:release:
    extends: .docker-build
    variables:
        IMAGE_TAG: $CI_COMMIT_TAG
    only:
        - tags

docker:production:
    extends: .docker-build
    variables:
        IMAGE_TAG: 'production'
        IMAGE_USERID: ${PRODUCTION_IMAGE_USERID}
        IMAGE_GROUPID: ${PRODUCTION_IMAGE_GROUPID}
    only:
        - tags
        - feature/imagine
        - feature/imagine-569
    when: manual

# ---------------------------------------------------------------
# Publish jobs
# ---------------------------------------------------------------

.deploy-file:
    stage: publish
    tags: [sih_public_runner]
    script:
        - APP_VERSION=$(mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout)
        - APP_GROUP_ID=$(mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.groupId -q -DforceStdout)
        - mvn deploy:deploy-file -s ./ci_settings.xml -DgroupId=${APP_GROUP_ID} -DartifactId=${APP_WAR_MODULE} -Dversion=${APP_VERSION} -Dfile=${APP_WAR_MODULE}/target/${APP_WAR_MODULE}-${APP_VERSION}.war -DrepositoryId=job-maven -Durl=$MAVEN_REPO_URL

deploy-file:
    extends: .deploy-file
    needs: [build]
    only:
        - develop
    when: manual

failsafe-deploy-file:develop:
    extends: .deploy-file
    needs: [failsafe-build]
    only:
        - develop
    when: manual

deploy-file:release:
    extends: .deploy-file
    image: ${CI_BUILD_IMAGE}
    needs: [build]
    allow_failure: true
    only:
        - tags

# ---------------------------------------------------------------
# Docs jobs
# ---------------------------------------------------------------

.pages:
  stage: docs
  image: ${CI_BUILD_IMAGE}
  tags: [sih_public_runner]
  before_script:
      - git submodule foreach git fetch origin
      - git submodule foreach git pull
  script:
      - echo "---- Generating SVG, from '*.plantuml' files..."
      - git submodule foreach ./generate.sh || true
      - echo "---- Generating Maven site..."
      - mvn site -s ./ci_settings.xml -q -Phsqldb -DperformRelease
  after_script:
      - mv target/site public
  allow_failure: true
  artifacts:
      paths:
          - public

pages:develop:
  extends: .pages
  only:
      - develop
  when: manual

pages:release:
  extends: .pages
  only:
      - tags
