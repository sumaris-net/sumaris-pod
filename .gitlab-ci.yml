# ---------------------------------------------------------------
# Global
# ---------------------------------------------------------------

# default image
image: maven:3.9.6-eclipse-temurin-17-alpine

# stages (main steps of pipeline)
stages:
  - environment
  - build
  - test
  - release
  - docker
  - publish
  - docs

workflow:
  rules:
    - changes:
        - '.gitlab-ci.yml'
        - '*/src/*'
        - '*/src/**/*'
        - 'pom.xml'
        - '*/pom.xml'

# ---------------------------------------------------------------
# Global variables
# ---------------------------------------------------------------

variables:
    DOCKER_IMAGE_REGISTRY: gitlab-registry.ifremer.fr/ifremer-commons/docker/images/
    DOCKER_IMAGE: ${DOCKER_IMAGE_REGISTRY}maven:3.9.6-eclipse-temurin-17-alpine
    DOCKER_DIND_VERSION: 24.0.7-dind
    #DOCKER_DIND_VERSION: latest
    DOCKER_DIND_IMAGE: ${DOCKER_IMAGE_REGISTRY}docker:${DOCKER_DIND_VERSION}
    CI_BUILD_IMAGE: ${CI_REGISTRY_IMAGE}/build:develop
    MAVEN_LOCAL_REPO: /root/.m2/repository/
    MAVEN_REPO_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/maven"
    APP_SHARED_MODULE: sumaris-core-shared
    APP_CORE_MODULE: sumaris-core
    APP_DB_MODULE: sumaris-db
    APP_WAR_MODULE: sumaris-server
    ARTIFACT_WAR_FILE: "${APP_WAR_MODULE}/target/${APP_WAR_MODULE}-*.war"
    ARTIFACT_ZIP_FILE: "${APP_WAR_MODULE}/target/${APP_WAR_MODULE}-*-standalone.zip"
    ARTIFACT_WAR_SHA256_FILE: "${APP_WAR_MODULE}/target/${APP_WAR_MODULE}*.sha256"
    ARTIFACT_DB_FILE: "${APP_CORE_MODULE}/target/${APP_DB_MODULE}-*.zip"
    ARTIFACT_DB_SHA256_FILE: "${APP_CORE_MODULE}/target/${APP_DB_MODULE}-*.sha256"
    ARTIFACT_CONFIG_FILES: "${APP_WAR_MODULE}/target/classes/*.properties"
    ENV_FILE: target/variables.env

# ---------------------------------------------------------------
# Jobs templates
# ---------------------------------------------------------------
.configure-git-template: &git-setup
  before_script:
    - echo "Fetching origin..."
    - git remote set-url origin "https://gitlab+access-token:${CI_ACCESS_TOKEN}@gitlab.ifremer.fr/${CI_PROJECT_PATH}.git"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git fetch origin ${CI_COMMIT_REF_NAME}
  tags: [sih_public_runner]

.docker:
    image: ${DOCKER_DIND_IMAGE}
    tags: [sih_public_runner]
    services:
        - docker:dind
    before_script:
        - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    after_script:
        - docker logout ${CI_REGISTRY}
    allow_failure: false

# ---------------------------------------------------------------
# Environment jobs : Create docker image for builds/release, this
# offers possibility to cache project dependencies so we don't
# have to download them every time.
# ---------------------------------------------------------------
build:env:
  extends: .docker
  stage: environment
  allow_failure: true
  script:
    # Create the target directory
    - mkdir -p target/docker
    - cp -rf ${APP_WAR_MODULE}/src/main/docker/build/* target/docker
    # Build and push the CI image
    - docker build --cache-from ${CI_BUILD_IMAGE} --pull -t ${CI_BUILD_IMAGE} --build-arg="IMAGE_REGISTRY=${DOCKER_IMAGE_REGISTRY}" -f target/docker/Dockerfile .
    - docker push ${CI_BUILD_IMAGE}
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
      changes:
        - '.gitlab-ci.yml'
        - '${APP_WAR_MODULE}/src/main/docker/build/Dockerfile'
        - 'pom.xml'
        - '*/pom.xml'
    - if: '$CI_COMMIT_BRANCH =~ /^features?\/.*/ || $CI_MERGE_REQUEST_ID'
      when: manual
    - when: never

# ---------------------------------------------------------------
# Build jobs
# ---------------------------------------------------------------
.build:
    stage: build
    tags: [sih_public_runner]
    script:
        - echo "Building from sources..."
        - mvn clean package -DskipTests
    after_script:
        # Get project version
        - mkdir -p target
        - APP_VERSION=$(mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout --non-recursive)
        - echo "APP_VERSION=${APP_VERSION}" > ${ENV_FILE}
    artifacts:
        paths:
            - ${ARTIFACT_WAR_FILE}
            - ${ARTIFACT_CONFIG_FILES}
        reports:
            dotenv: ${ENV_FILE}
        expire_in: 60 minutes
    environment:
        name: test

build:
    extends: .build
    image: ${CI_BUILD_IMAGE}
    only:
      - develop

build:feature:
  extends: .build
  image: ${CI_BUILD_IMAGE}
  only:
    - /^feature\/.*/
    - /^features\/.*/
  when: manual

# ---------------------------------------------------------------
# Tests jobs
# ---------------------------------------------------------------
.test:
    stage: test
    tags: [sih_public_runner]
    script:
        - mvn verify surefire-report:report -s ./ci_settings.xml -q
    environment:
        name: test
    artifacts:
        paths:
          - ${APP_SHARED_MODULE}/site/surefire-report.html
          - ${APP_SHARED_MODULE}/target/surefire-reports/*
          - ${APP_CORE_MODULE}/site/surefire-report.html
          - ${APP_CORE_MODULE}/target/surefire-reports/*
          - ${APP_WAR_MODULE}/target/surefire-reports/*
          - ${APP_WAR_MODULE}/site/surefire-report.html
        expire_in: 72 hours

test:
    extends: .test
    image: ${CI_BUILD_IMAGE}
    rules:
      - if: $CI_COMMIT_TAG
        when: never
      - if: '$CI_MERGE_REQUEST_ID || $CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH =~ /^feature/ || $CI_COMMIT_BRANCH =~ /^features/'
        when: manual
    allow_failure: true

sonarqube:
    stage: test
    tags: [sih_public_runner]
    variables:
        SONAR_TOKEN: "e6f816eee72d3d5c03319ec74b468157b9164d12"
        SONAR_HOST_URL: http://visi-common-sonar.ifremer.fr:9000
    image:
        name: sonarsource/sonar-scanner-cli:latest
        entrypoint: [""]
    script:
        - echo "Sonarqube analysis in progress"
        - sonar-scanner
            -Dsonar.projectKey=imagine-pod
            -Dsonar.host.url=$SONAR_HOST_URL
            -Dsonar.login=$SONAR_TOKEN
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.java.binaries=.
            -Dsonar.java.libraries=.
    allow_failure: true
    only:
      - develop
      - /^feature\/.*/
      - /^features\/.*/
    when: manual

# ---------------------------------------------------------------
# Release jobs
# ---------------------------------------------------------------

.release:
  <<: *git-setup
  stage: release
  tags: [sih_public_runner]
  script:
    - echo "Preparing release..."
    - export MVN_OPTS="-DinstallProject=false -DpushRemote=false -DreleaseVersion=${RELEASE_VERSION:-}"
    - mvn --batch-mode gitflow:release-start ${MVN_OPTS}
    - echo "Performing release..."
    - mvn --batch-mode clean install -DskipTests -DperformRelease -Phsqldb
    - APP_VERSION=$(mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout --non-recursive)
    - echo "-- Generated files:"
    - ls -la ${ARTIFACT_WAR_FILE} ${ARTIFACT_ZIP_FILE} ${ARTIFACT_CONFIG_FILES}
    - echo "-- Creating SHA256 file..."
    - echo "$(cd ${APP_WAR_MODULE}/target && sha256sum ${APP_WAR_MODULE}-*.war)" > ${APP_WAR_MODULE}/target/${APP_WAR_MODULE}-${APP_VERSION}.sha256
    - echo "$(cd ${APP_WAR_MODULE}/target && sha256sum ${APP_WAR_MODULE}-*.zip)" >> ${APP_WAR_MODULE}/target/${APP_WAR_MODULE}-${APP_VERSION}.sha256
    - echo "Generating DB..."
    - mvn --batch-mode -Prun,hsqldb -q -DskipTests -pl ${APP_CORE_MODULE}
    - cd ${CI_PROJECT_DIR}/target
    - zip -q -r "${CI_PROJECT_DIR}/${APP_CORE_MODULE}/target/${APP_DB_MODULE}-${APP_VERSION}.zip" db
    - cd ${CI_PROJECT_DIR}
    - echo "-- Generated files:"
    - ls -la ${ARTIFACT_DB_FILE}
    - echo "-- Creating SHA256 file..."
    - echo "$(cd ${APP_CORE_MODULE}/target && sha256sum ${APP_DB_MODULE}-*.zip)" > ${APP_CORE_MODULE}/target/${APP_DB_MODULE}-${APP_VERSION}.sha256
    - echo "Deploy binaries to package registry"
    - APP_GROUP_ID=$(mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.groupId -q -DforceStdout --non-recursive)
    - mvn deploy:deploy-file -q -s ./ci_settings.xml -DgroupId=${APP_GROUP_ID} -DartifactId=${APP_WAR_MODULE} -Dversion=${APP_VERSION} -Dfile=${APP_WAR_MODULE}/target/${APP_WAR_MODULE}-${APP_VERSION}.war -DpomFile=${APP_WAR_MODULE}/pom.xml -DrepositoryId=job-maven -Durl=$MAVEN_REPO_URL
    - mvn deploy:deploy-file -q -s ./ci_settings.xml -DgroupId=${APP_GROUP_ID} -DartifactId=${APP_WAR_MODULE} -Dversion=${APP_VERSION} -Dfile=${APP_WAR_MODULE}/target/${APP_WAR_MODULE}-${APP_VERSION}-standalone.zip -Dpackaging=zip -Dclassifier=standalone -DrepositoryId=job-maven -Durl=$MAVEN_REPO_URL
    - mvn deploy:deploy-file -q -s ./ci_settings.xml -DgroupId=${APP_GROUP_ID} -DartifactId=${APP_WAR_MODULE} -Dversion=${APP_VERSION} -Dfile=${APP_WAR_MODULE}/target/${APP_WAR_MODULE}-${APP_VERSION}.sha256 -Dpackaging=sha256 -DrepositoryId=job-maven -Durl=$MAVEN_REPO_URL
    - mvn deploy:deploy-file -q -s ./ci_settings.xml -DgroupId=${APP_GROUP_ID} -DartifactId=${APP_DB_MODULE} -Dversion=${APP_VERSION} -Dfile=${APP_CORE_MODULE}/target/${APP_DB_MODULE}-${APP_VERSION}.zip -Dpackaging=zip -DrepositoryId=job-maven -Durl=$MAVEN_REPO_URL
    - mvn deploy:deploy-file -q -s ./ci_settings.xml -DgroupId=${APP_GROUP_ID} -DartifactId=${APP_DB_MODULE} -Dversion=${APP_VERSION} -Dfile=${APP_CORE_MODULE}/target/${APP_DB_MODULE}-${APP_VERSION}.sha256 -Dpackaging=sha256 -DrepositoryId=job-maven -Durl=$MAVEN_REPO_URL
    - echo "Pushing changes to upstream"
    - git diff --cached
    - git commit -am "[CI] release performed" || echo "Nothing to commit, continue"
    - git fetch origin master || echo "Cannot fetch origin master, but continue"
    - mvn -B gitflow:release-finish -DskipTestProject=true -DpushRemote=true
    - echo "APP_VERSION=${APP_VERSION}" > ${ENV_FILE}
  artifacts:
    paths:
      - ${ARTIFACT_WAR_FILE}
      - ${ARTIFACT_CONFIG_FILES}
    reports:
      dotenv: ${ENV_FILE}
    expire_in: 60 minutes
  allow_failure: false
  only:
    - develop
  when: manual

release:
  extends: .release
  stage: build
  image: ${CI_BUILD_IMAGE}

release:tags:
  <<: *git-setup
  image: ${CI_BUILD_IMAGE}
  stage: release
  tags: [sih_public_runner]
  script:
    - echo "Performing release..."
    - export MVN_OPTS="-DinstallProject=false -DpushRemote=false -DreleaseVersion=${CI_COMMIT_TAG}"
    - mvn --batch-mode clean install -DskipTests -DperformRelease -Phsqldb
    - APP_VERSION=${CI_COMMIT_TAG}
    - echo "-- Generated files:"
    - ls -la ${ARTIFACT_WAR_FILE} ${ARTIFACT_ZIP_FILE} ${ARTIFACT_CONFIG_FILES}
    - echo "-- Creating SHA256 file..."
    - echo "$(cd ${APP_WAR_MODULE}/target && sha256sum ${APP_WAR_MODULE}-*.war)" > ${APP_WAR_MODULE}/target/${APP_WAR_MODULE}-${APP_VERSION}.sha256
    - echo "$(cd ${APP_WAR_MODULE}/target && sha256sum ${APP_WAR_MODULE}-*.zip)" >> ${APP_WAR_MODULE}/target/${APP_WAR_MODULE}-${APP_VERSION}.sha256
    - echo "Generating DB..."
    - mvn -s ./ci_settings.xml --batch-mode -Prun,hsqldb -q -DskipTests -pl ${APP_CORE_MODULE}
    - zip -q -r "${APP_CORE_MODULE}/target/${APP_DB_MODULE}-${CI_COMMIT_TAG}.zip" target/db
    - echo "-- Generated files:"
    - ls -la ${ARTIFACT_DB_FILE}
    - echo "-- Creating SHA256 files..."
    - echo "$(cd ${APP_CORE_MODULE}/target && sha256sum ${APP_DB_MODULE}-*.zip)" > ${APP_CORE_MODULE}/target/${APP_DB_MODULE}-${APP_VERSION}.sha256
    - echo "Deploy binaries to package registry..."
    - APP_VERSION=$(mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout --non-recursive)
    - APP_GROUP_ID=$(mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.groupId -q -DforceStdout --non-recursive)
    - mvn deploy:deploy-file -s ./ci_settings.xml -DgroupId=${APP_GROUP_ID} -DartifactId=${APP_WAR_MODULE} -Dversion=${APP_VERSION} -Dfile=${APP_WAR_MODULE}/target/${APP_WAR_MODULE}-${APP_VERSION}.war -DpomFile=${APP_WAR_MODULE}/pom.xml -DrepositoryId=job-maven -Durl=$MAVEN_REPO_URL
    - mvn deploy:deploy-file -s ./ci_settings.xml -DgroupId=${APP_GROUP_ID} -DartifactId=${APP_WAR_MODULE} -Dversion=${APP_VERSION} -Dfile=${APP_WAR_MODULE}/target/${APP_WAR_MODULE}-${APP_VERSION}-standalone.zip -Dpackaging=zip -Dclassifier=standalone -DrepositoryId=job-maven -Durl=$MAVEN_REPO_URL
    - mvn deploy:deploy-file -s ./ci_settings.xml -DgroupId=${APP_GROUP_ID} -DartifactId=${APP_WAR_MODULE} -Dversion=${APP_VERSION} -Dfile=${APP_WAR_MODULE}/target/${APP_WAR_MODULE}-${APP_VERSION}.sha256 -Dpackaging=sha256 -DrepositoryId=job-maven -Durl=$MAVEN_REPO_URL
    - mvn deploy:deploy-file -s ./ci_settings.xml -DgroupId=${APP_GROUP_ID} -DartifactId=${APP_DB_MODULE} -Dversion=${APP_VERSION} -Dfile=${APP_CORE_MODULE}/target/${APP_DB_MODULE}-${APP_VERSION}.zip -Dpackaging=zip -DrepositoryId=job-maven -Durl=$MAVEN_REPO_URL
    - mvn deploy:deploy-file -s ./ci_settings.xml -DgroupId=${APP_GROUP_ID} -DartifactId=${APP_DB_MODULE} -Dversion=${APP_VERSION} -Dfile=${APP_CORE_MODULE}/target/${APP_DB_MODULE}-${APP_VERSION}.sha256 -Dpackaging=sha256 -DrepositoryId=job-maven -Durl=$MAVEN_REPO_URL
  artifacts:
    paths:
      - ${ARTIFACT_WAR_FILE}
      - ${ARTIFACT_CONFIG_FILES}
    expire_in: 60 minutes
  allow_failure: false
  only:
    - tags
  when: manual

gitlab-release:
    stage: release
    tags: [sih_public_runner]
    image: registry.gitlab.com/gitlab-org/release-cli:latest
    script:
        - echo "running release for ${CI_COMMIT_TAG}"
    release:
        name: "Release ${CI_PROJECT_NAME}-${CI_COMMIT_TAG}"
        description: "Created using the release-cli $EXTRA_DESCRIPTION"
        tag_name: "${CI_COMMIT_TAG}"
        ref: "${CI_COMMIT_TAG}"
        assets:
          links:
            - name: "${APP_WAR_MODULE}-${CI_COMMIT_TAG}.war"
              url: "${MAVEN_REPO_URL}/net/sumaris/${APP_WAR_MODULE}/${CI_COMMIT_TAG}/${APP_WAR_MODULE}-${CI_COMMIT_TAG}.war"
            - name: "${APP_WAR_MODULE}-${CI_COMMIT_TAG}-standalone.zip"
              url: "${MAVEN_REPO_URL}/net/sumaris/${APP_WAR_MODULE}/${CI_COMMIT_TAG}/${APP_WAR_MODULE}-${CI_COMMIT_TAG}-standalone.zip"
            - name: "${APP_WAR_MODULE}-${CI_COMMIT_TAG}.sha256"
              url: "${MAVEN_REPO_URL}/net/sumaris/${APP_WAR_MODULE}/${CI_COMMIT_TAG}/${APP_WAR_MODULE}-${CI_COMMIT_TAG}.sha256"
            - name: "${APP_DB_MODULE}-${CI_COMMIT_TAG}.zip"
              url: "${MAVEN_REPO_URL}/net/sumaris/${APP_DB_MODULE}/${CI_COMMIT_TAG}/${APP_DB_MODULE}-${CI_COMMIT_TAG}.zip"
            - name: "${APP_DB_MODULE}-${CI_COMMIT_TAG}.sha256"
              url: "${MAVEN_REPO_URL}/net/sumaris/${APP_DB_MODULE}/${CI_COMMIT_TAG}/${APP_DB_MODULE}-${CI_COMMIT_TAG}.sha256"
    only:
        - tags

# ---------------------------------------------------------------
# Docker jobs
# ---------------------------------------------------------------
.docker-build:
    extends: .docker
    stage: docker
    script:
        # Create the target directory, to build the image
        - mkdir -p target/docker/config
        - cp -rf ${APP_WAR_MODULE}/src/main/docker/run/* target/docker/
        - cp -f ${ARTIFACT_WAR_FILE} target/docker/app.war
        - cp -f ${ARTIFACT_CONFIG_FILES} target/docker/config/
        - ls -l target/docker/config
        - cd target/docker
        # Build docker image
        - docker pull ${CI_REGISTRY_IMAGE}:${IMAGE_TAG} || true
        - docker build --cache-from ${CI_REGISTRY_IMAGE}:${IMAGE_TAG} --pull -t ${CI_REGISTRY_IMAGE}:${IMAGE_TAG} --build-arg="IMAGE_REGISTRY=${DOCKER_IMAGE_REGISTRY}" .
        - docker push ${CI_REGISTRY_IMAGE}:${IMAGE_TAG}
    artifacts:
        paths:
            - target/docker
        expire_in: 60 minutes

# to run specific feature
docker:feature:
  extends: .docker-build
  needs: ['build:feature']
  variables:
    IMAGE_TAG: 'feature'
  only:
    - /^feature\/.*/
    - /^features\/.*/

docker:develop:
    extends: .docker-build
    needs: [build]
    variables:
        IMAGE_TAG: 'develop'
    only:
        - develop

docker:release:
    extends: .docker-build
    needs: [release]
    variables:
        IMAGE_TAG: ${APP_VERSION}
    only:
        - develop

docker:release:tags:
  extends: .docker-build
  needs: [release:tags]
  variables:
    IMAGE_TAG: ${CI_COMMIT_TAG}
  only:
    - tags

# ---------------------------------------------------------------
# Docs jobs
# ---------------------------------------------------------------

.pages:
  stage: docs
  image: ${CI_BUILD_IMAGE}
  tags: [sih_public_runner]
  before_script:
      - git submodule foreach git fetch origin
      - git submodule foreach git pull
  script:
    - echo "---- Generating SVG (e.g.PlantUML files) ..."
    - git submodule foreach ./plantuml.sh svg || true
    - echo "---- Cleaning sub modules..."
    - git submodule foreach rm -rf node_modules || true
    - echo "---- Generating Maven site..."
    - mvn site -s ./ci_settings.xml -q -Phsqldb -DperformRelease
  after_script:
      - mv target/site public
  allow_failure: true
  artifacts:
      paths:
          - public

pages:develop:
  extends: .pages
  only:
      - develop
  when: manual

pages:release:
  extends: .pages
  only:
      - tags
  when: manual
