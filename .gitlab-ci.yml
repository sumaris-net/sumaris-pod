# ---------------------------------------------------------------
# Global
# ---------------------------------------------------------------

# default image
image: jlrigau/maven-git

# stages (main steps of pipeline)
stages:
    - build
    - alt_build
    - test
    - release
    - docker
    - docs

# ---------------------------------------------------------------
# Global variables
# ---------------------------------------------------------------

variables:
    DOCKER_DRIVER: overlay2
    ANSIBLE_FORCE_COLOR: '1'
    CONTAINER_BUILD_IMAGE: $CI_REGISTRY_IMAGE/build:develop
    #CONTAINER_SNAPSHOT_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    CONTAINER_SNAPSHOT_IMAGE: $CI_REGISTRY_IMAGE:develop
    MAVEN_LOCAL_REPO: /root/.m2/repository/
    MAVEN_REPO_URL: https://gitlab.ifremer.fr/api/v4/projects/1272/packages/maven
    APP_NAME: sumaris
    APP_CORE_MODULE: sumaris-core
    APP_DB_MODULE: sumaris-db
    APP_WAR_MODULE: sumaris-server
    ARTIFACT_WAR_FILE: "${APP_WAR_MODULE}/target/*.war"
    ARTIFACT_CONFIG_FILES: "${APP_WAR_MODULE}/target/classes/*.properties"
    ENV_FILE: target/variables.env

# Must be defined into pipelines variables :
    # CI_REGISTRY_USER:
    # CI_REGISTRY_PASSWORD:


# ---------------------------------------------------------------
# Jobs templates
# ---------------------------------------------------------------

.docker:
    image: docker:latest
    tags: [sih_public_runner]
    services:
        - docker:dind
    before_script:
        - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY} || true
    after_script:
        - docker logout ${CI_REGISTRY}
    allow_failure: false

# ---------------------------------------------------------------
# Build jobs
# ---------------------------------------------------------------

.build:
    stage: build
    tags: [sih_public_runner]
    script:
        - echo "Building from sources..."
        - mvn clean install -s ./ci_settings.xml -q -DskipTests
        # Get project version
        - APP_VERSION=$(mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout --non-recursive)
        - echo "APP_VERSION=${APP_VERSION}" > ${ENV_FILE}
    environment:
        name: test
    artifacts:
        paths:
            - ${ARTIFACT_WAR_FILE}
            - ${ARTIFACT_CONFIG_FILES}
        reports:
            dotenv: ${ENV_FILE}
        expire_in: 60 minutes
    only:
        - develop

build:
    extends: .build
    image: ${CONTAINER_BUILD_IMAGE}

failsafe-build:
    extends: .build
    stage: alt_build
    when: on_failure

docker-for-fast-build:
    extends: .docker
    stage: alt_build
    when: on_failure
    allow_failure: true
    script:
        - echo 'FROM jlrigau/maven-git' > Dockerfile
        - echo 'WORKDIR /.build-cache' >> Dockerfile
        - echo 'COPY ./ ./' >> Dockerfile
        - echo "ENV MAVEN_LOCAL_REPO=${MAVEN_LOCAL_REPO}" >> Dockerfile
        - echo 'RUN du -s `find ${MAVEN_LOCAL_REPO} -maxdepth 1 | egrep -v "^\.$"`>/before.txt' >> Dockerfile
        - echo 'RUN mvn install -s ./ci_settings.xml -q -DskipTests' >> Dockerfile
        - echo 'RUN mvn clean -s ./ci_settings.xml -q ' >> Dockerfile
        - echo 'RUN du -s `find ${MAVEN_LOCAL_REPO} -maxdepth 1 | egrep -v "^\.$"`>/after.txt' >> Dockerfile
        - echo "RUN diff /before.txt /after.txt || true" >> Dockerfile
        - echo 'WORKDIR /build' >> Dockerfile
        - docker build --pull -t ${CONTAINER_BUILD_IMAGE} .
        - docker push ${CONTAINER_BUILD_IMAGE}

# ---------------------------------------------------------------
# Test jobs
# ---------------------------------------------------------------

sonarqube:
    stage: test
    tags:
        - sih_public_runner
    variables:
        SONAR_TOKEN: "e6f816eee72d3d5c03319ec74b468157b9164d12"
        SONAR_HOST_URL: http://visi-common-sonar.ifremer.fr:9000
    image:
        name: sonarsource/sonar-scanner-cli:latest
        entrypoint: [""]
    script:
        - echo "Sonarqube analysis in progress"
        - sonar-scanner
            -Dsonar.projectKey=imagine-pod
            -Dsonar.host.url=$SONAR_HOST_URL
            -Dsonar.login=$SONAR_TOKEN
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.java.binaries=.
            -Dsonar.java.libraries=.
    only:
        - develop
    when: manual

# ---------------------------------------------------------------
# Deploy jobs
# ---------------------------------------------------------------

#.deploy-file:
#    stage: deploy
#    tags: [sih_public_runner]
#    script:
#        - APP_VERSION=$(mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout)
#        - APP_GROUP_ID=$(mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.groupId -q -DforceStdout)
#        - mvn -s ./ci_settings.xml deploy:deploy-file -DgroupId=${APP_GROUP_ID} -DartifactId=${APP_WAR_MODULE} -Dversion=${APP_VERSION} -Dfile=${APP_WAR_MODULE}/target/${APP_WAR_MODULE}-${APP_VERSION}.war -DrepositoryId=job-maven -Durl=$MAVEN_REPO_URL
#    only:
#        - develop
#
#fast-deploy-file:
#    extends: .deploy-file
#    needs: [fast-build]
#
#failsafe-deploy-file:
#    extends: .deploy-file
#    needs: [failsafe-build]

# ---------------------------------------------------------------
# Release jobs
# ---------------------------------------------------------------

.release:
    stage: release
    tags: [sih_public_runner]
    before_script:
        - git remote set-url origin ${CI_REPOSITORY_URL}
        - git config --global user.email "${GITLAB_USER_EMAIL}"
        - git config --global user.name "${GITLAB_USER_NAME}"
#        - git reset --hard develop
#        - git fetch origin
#        - git pull origin develop
    script:
        - echo "Preparing release..."
        - git branch -D release/$RELEASE_VERSION || true
        - git status
        - mvn -s ./ci_settings.xml -B gitflow:release-start --batch-mode -DreleaseVersion="$RELEASE_VERSION"
        - echo "Performing release..."
        - mvn clean install -s ./ci_settings.xml --batch-mode -DperformRelease -DskipTests
        - echo "Creating test DB..."
        - mvn -pl ${APP_CORE_MODULE} -q -Prun,hsqldb -DskipTests --batch-mode
        - cd ${APP_CORE_MODULE}/target && tar -cf "${APP_DB_MODULE}-${RELEASE_VERSION}.tar.gz" db && cd ../..
        - echo "Pushing changes to upstream"
        - git commit -a -m "Release $RELEASE_VERSION"
        - git status
        - mvn gitflow:release-finish
    after_script:
        - echo "APP_VERSION=${RELEASE_VERSION}" > ${ENV_FILE}
    artifacts:
        paths:
            - ${ARTIFACT_WAR_FILE}
            - ${ARTIFACT_CONFIG_FILES}
            - ${APP_WAR_MODULE}/target/*.tar.gz
            - ${APP_WAR_MODULE}/target/*.zip
        reports:
            dotenv: ${ENV_FILE}
    only:
        - develop
    when: manual

release:
    extends: .release
    image: ${CONTAINER_BUILD_IMAGE}
    needs:
        - fast-build

failsafe-release:
    extends: .release
    needs:
        - failsafe-build

gitlab-release:
    stage: release
    tags: [sih_public_runner]
    image: registry.gitlab.com/gitlab-org/release-cli:latest
    script:
        - echo "running release for ${CI_COMMIT_TAG}"
    release:
        name: "Release ${APP_NAME}-${CI_COMMIT_TAG}"
        description: "Created using the release-cli $EXTRA_DESCRIPTION"
        tag_name: "${CI_COMMIT_TAG}"
        ref: "${CI_COMMIT_TAG}"
    only:
        - tags

# ---------------------------------------------------------------
# Docker jobs
# ---------------------------------------------------------------

.docker-build:
    extends: .docker
    stage: docker
    before_script:
        # Login to registry
        - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY} || true
        # Create the starter script
        - echo '#!/bin/bash' > run.sh
        - echo 'BASEDIR=/app' >> run.sh
        - echo 'JAVA_OPTS="-Dsumaris.basedir=${BASEDIR}"' >> run.sh
        - echo 'JAVA_OPTS="$JAVA_OPTS -Dspring.config.location=${BASEDIR}/config/"' >> run.sh
        - echo 'JAVA_OPTS="$JAVA_OPTS -Doracle.net.tns_admin=/home/tnsnames' >> run.sh
        - echo 'JAVA_OPTS="$JAVA_OPTS -Doracle.jdbc.timezoneAsRegion=false"' >> run.sh
        - echo '[[ "_${PROFILES}" != "_" ]] && JAVA_OPTS="$JAVA_OPTS -Dspring.profiles.active=${PROFILES}"' >> run.sh
        - echo '[[ "_${TIMEZONE}" != "_" ]] && JAVA_OPTS="$JAVA_OPTS -Duser.timezone=${TIMEZONE}"' >> run.sh
        - echo 'ARGS=${@:2}' >> run.sh
        - echo 'java ${JAVA_OPTS} -server -jar /app/app.war ${ARGS}' >> run.sh
        # Create the Dockerfile
        - echo 'FROM openjdk:8-jdk-alpine' > Dockerfile
        - echo "ARG CONFIG_FILE=${ARTIFACT_CONFIG_FILES}" >> Dockerfile
        - echo 'RUN apt-get update && apt-get -y install libsodium-dev' >> Dockerfile
        - echo 'RUN addgroup -S spring && adduser -S spring -G spring' >> Dockerfile
        - echo 'USER spring:spring' >> Dockerfile
        - echo 'RUN mkdir /app' >> Dockerfile
        - echo "COPY ${ARTIFACT_WAR_FILE} /app/app.war" >> Dockerfile
        - echo "COPY ${CONFIG_FILE} /app/config/" >> Dockerfile
        - echo 'ADD run.sh /app/run.sh' >> Dockerfile
        - echo 'RUN chmod +x /app/run.sh' >> Dockerfile
        - echo 'ENV PROFILES=default \' >> Dockerfile
        - echo '    TIMEZONE=UTC' >> Dockerfile
        - echo 'WORKDIR /app' >> Dockerfile
        - echo 'EXPOSE 8080' >> Dockerfile
        - echo 'ENTRYPOINT ["run.sh"]' >> DockerFile
        # Build docker image
        - docker pull ${CONTAINER_SNAPSHOT_IMAGE} || true
        - docker build --cache-from ${CONTAINER_SNAPSHOT_IMAGE} --pull -t ${CONTAINER_SNAPSHOT_IMAGE} . || true
    artifacts:
        paths:
            - DockerFile

docker:
    extends: .docker-build
    script:
        - docker push ${CONTAINER_SNAPSHOT_IMAGE}
    only:
        - develop
    when: manual

docker:release:
    extends: .docker-build
    variables:
        IMAGE_TAG: $CI_COMMIT_TAG
    script:
        - docker tag ${CONTAINER_SNAPSHOT_IMAGE} ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}
        - docker push ${CI_REGISTRY_IMAGE}:${IMAGE_TAG}
    only:
        - tags

#docker:prod-ifremer:
#    extends: .docker-file
#    script:
#        - docker build --cache-from ${CONTAINER_SNAPSHOT_IMAGE} --pull -t ${CONTAINER_SNAPSHOT_IMAGE} .
#        - docker tag ${CONTAINER_SNAPSHOT_IMAGE} ${CI_REGISTRY_IMAGE}:${APP_VERSION}:ifremer .
#        - docker push ${CI_REGISTRY_IMAGE}:${APP_VERSION}:ifremer
#    only:
#        - tags
#    when: manual

# ---------------------------------------------------------------
# Docs jobs
# ---------------------------------------------------------------

pages:
    stage: docs
    tags:
        - sih_public_runner
    image: python:3.7-alpine
    before_script:
        - git submodule foreach git fetch origin
        - git submodule foreach git pull
    script:
        - Echo "Generate SVG images"
        - git submodule foreach ./generate.sh
        - mvn -s ./ci_settings.xml site -q -Prun,hsqldb -DperformRelease
    after_script:
        - mv target/site public
    artifacts:
        paths:
            - public
    only:
        - develop
        - feature/imagine
    when: manual


