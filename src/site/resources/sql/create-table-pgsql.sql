create sequence acquisition_level_seq start 1 increment 1;
create sequence applied_strategy_seq start 1 increment 1;
create sequence department_seq start 1 increment 1;
create sequence depth_gradient_seq start 1 increment 1;
create sequence device_position_seq start 1 increment 1;
create sequence distance_to_coast_gradient_seq start 1 increment 1;
create sequence extraction_product_freq_seq start 1 increment 1;
create sequence extraction_product_seq start 1 increment 1;
create sequence extraction_product_strata_seq start 1 increment 1;
create sequence extraction_product_table_seq start 1 increment 1;
create sequence file_seq start 1 increment 1;
create sequence file_status_seq start 1 increment 1;
create sequence fraction_seq start 1 increment 1;
create sequence gear_classification_seq start 1 increment 1;
create sequence gear_seq start 1 increment 1;
create sequence grouping_classification_seq start 1 increment 1;
create sequence grouping_level_seq start 1 increment 1;
create sequence grouping_seq start 1 increment 1;
create sequence location_classification_seq start 1 increment 1;
create sequence location_level_seq start 1 increment 1;
create sequence location_seq start 1 increment 1;
create sequence matrix_seq start 1 increment 1;
create sequence method_seq start 1 increment 1;
create sequence metier_seq start 1 increment 1;
create sequence nearby_specific_area_seq start 1 increment 1;
create sequence object_type_seq start 1 increment 1;
create sequence order_item_seq start 1 increment 1;
create sequence order_type_seq start 1 increment 1;
create sequence origin_item_type_seq start 1 increment 1;
create sequence p01_rdb_landing_seq start 1 increment 1;
create sequence p01_rdb_species_length_seq start 1 increment 1;
create sequence p01_rdb_species_list_seq start 1 increment 1;
create sequence p01_rdb_station_seq start 1 increment 1;
create sequence p01_rdb_trip_seq start 1 increment 1;
create sequence parameter_group_seq start 1 increment 1;
create sequence parameter_seq start 1 increment 1;
create sequence person_seq start 1 increment 1;
create sequence pmfm_seq start 1 increment 1;
create sequence pmfm_strategy_seq start 1 increment 1;
create sequence processing_history_seq start 1 increment 1;
create sequence processing_status_seq start 1 increment 1;
create sequence processing_type_seq start 1 increment 1;
create sequence program2department_seq start 1 increment 1;
create sequence program2person_seq start 1 increment 1;
create sequence program_privilege_seq start 1 increment 1;
create sequence program_property_seq start 1 increment 1;
create sequence program_seq start 1 increment 1;
create sequence qualitative_value_seq start 1 increment 1;
create sequence quality_flag_seq start 1 increment 1;
create sequence reference_taxon_seq start 1 increment 1;
create sequence round_weight_conversion_seq start 1 increment 1;
create sequence sale_type_seq start 1 increment 1;
create sequence software_property_seq start 1 increment 1;
create sequence software_seq start 1 increment 1;
create sequence status_seq start 1 increment 1;
create sequence strategy2department_seq start 1 increment 1;
create sequence strategy_seq start 1 increment 1;
create sequence system_version_seq start 1 increment 1;
create sequence taxon_group_historical_rec_seq start 1 increment 1;
create sequence taxon_group_seq start 1 increment 1;
create sequence taxon_group_type_seq start 1 increment 1;
create sequence taxon_name_seq start 1 increment 1;
create sequence taxonomic_level_seq start 1 increment 1;
create sequence transcribing_item_seq start 1 increment 1;
create sequence transcribing_item_type_seq start 1 increment 1;
create sequence transcribing_system_seq start 1 increment 1;
create sequence unit_seq start 1 increment 1;
create sequence user_profile_seq start 1 increment 1;
create sequence user_settings_seq start 1 increment 1;
create sequence user_token_seq start 1 increment 1;
create sequence validity_status_seq start 1 increment 1;
create sequence vessel_type_seq start 1 increment 1;
create sequence weight_length_conversion_seq start 1 increment 1;
create table acquisition_level (id int4 not null, comments varchar(2000), creation_date timestamp not null, description varchar(255), label varchar(50) not null, name varchar(100) not null, update_date timestamp, status_fk int4 not null, primary key (id));
create table applied_period (start_date date not null, acquisition_number int4, end_date date not null, applied_strategy_fk int4 not null, primary key (start_date, applied_strategy_fk));
create table applied_strategy (id int4 not null, location_fk int4 not null, strategy_fk int4 not null, primary key (id));
create table batch (id int4 not null, comments varchar(2000), control_date timestamp, exhaustive_inventory boolean, hash int4, individual_count int4, label varchar(40), qualification_comments varchar(2000), qualification_date timestamp, rank_order int4 not null, sampling_ratio float8, sampling_ratio_text varchar(50), subgroup_count int4, update_date timestamp, operation_fk int4, parent_batch_fk int4, quality_flag_fk int4 not null, recorder_department_fk int4 not null, reference_taxon_fk int4, sale_fk int4, taxon_group_fk int4, primary key (id));
create table denormalized_batch (id int4 not null, comments varchar(2000), elevate_context_weight float8, elevate_individual_count int4, elevate_rtp_weight float8, elevate_weight float8, exhaustive_inventory boolean, flat_rank_order int2 not null, indirect_context_weight float8, indirect_individual_count int4, indirect_rtp_weight float8, indirect_weight float8, individual_count int4, is_discard boolean not null, is_landing boolean not null, label varchar(40), rank_order int4 not null, sampling_ratio float8, sampling_ratio_text varchar(50), sorting_values_text varchar(255), taxon_elevate_context_weight float8, taxon_elevate_indiv_count float8, tree_indent varchar(256), tree_level int2 not null, update_date timestamp not null, weight float8, calculated_taxon_group_fk int4, inherited_reference_taxon_fk int4, inherited_taxon_group_fk int4, operation_fk int4, parent_batch_fk int4, quality_flag_fk int4 not null, reference_taxon_fk int4, sale_fk int4, taxon_group_fk int4, weight_method_fk int4, primary key (id));
create table denormalized_batch_sort_val (id int4 not null, alphanumerical_value varchar(40), is_inherited boolean not null, numerical_value float8, rank_order int4 not null, batch_fk int4 not null, parameter_fk int4 not null, pmfm_fk int4 not null, qualitative_value_fk int4, unit_fk int4 not null, primary key (id));
create table department (id int4 not null, comments varchar(2000), creation_date timestamp not null, description varchar(255), label varchar(50) not null, name varchar(100) not null, site_url varchar(255), update_date timestamp, location_fk int4, logo_fk int4, status_fk int4 not null, primary key (id));
create table depth_gradient (id int4 not null, comments varchar(2000), creation_date timestamp not null, description varchar(255), label varchar(50) not null, name varchar(100) not null, rank_order int4 not null, update_date timestamp, status_fk int4 not null, primary key (id));
create table device_position (id int4 not null, control_date timestamp, creation_date timestamp not null, date_time timestamp not null, latitude float8 not null, longitude float8 not null, object_id int4 not null, qualification_comments varchar(2000), qualification_date timestamp, update_date timestamp not null, validation_date timestamp, object_type_fk int4 not null, quality_flag_fk int4 not null, recorder_department_fk int4 not null, recorder_person_fk int4, primary key (id));
create table distance_to_coast_gradient (id int4 not null, comments varchar(2000), creation_date timestamp not null, description varchar(255), label varchar(50) not null, name varchar(100) not null, rank_order int4 not null, update_date timestamp, status_fk int4 not null, primary key (id));
create table expected_sale (id int4 not null, sale_date timestamp, landing_fk int4, sale_location_fk int4 not null, sale_type_fk int4 not null, trip_fk int4, primary key (id));
create table extraction_product (id int4 not null, comments varchar(2000), creation_date timestamp not null, description varchar(255), documentation varchar(20971520), filter varchar(20971520), format varchar(50), is_spatial boolean not null, label varchar(50) not null, name varchar(100) not null, update_date timestamp, version varchar(10), parent_extraction_product_fk int4, processing_frequency_fk int4 not null, recorder_department_fk int4 not null, recorder_person_fk int4, status_fk int4 not null, primary key (id));
create table extraction_product_column (id int4 not null, column_name varchar(100) not null, label varchar(50) not null, name varchar(100), rank_order int4, type varchar(30), extraction_product_table_fk int4 not null, primary key (id));
create table extraction_product_strata (id int4 not null, agg_function varchar(30), creation_date timestamp not null, is_default boolean, label varchar(50) not null, name varchar(100), update_date timestamp, agg_extraction_column_fk int4, extraction_product_fk int4 not null, space_extraction_column_fk int4, status_fk int4 not null, extraction_table_fk int4, tech_extraction_column_fk int4, time_extraction_column_fk int4, primary key (id));
create table extraction_product_table (id int4 not null, catalog varchar(30), creation_date timestamp not null, is_spatial boolean, label varchar(50) not null, name varchar(100) not null, rank_order int4, schema varchar(30), table_name varchar(50) not null, update_date timestamp, extraction_product_fk int4 not null, status_fk int4 not null, primary key (id));
create table extraction_product_value (id int4 not null, label varchar(50) not null, name varchar(100), extraction_product_column_fk int4 not null, primary key (id));
create table file (id int4 not null, comments varchar(2000), content_type varchar(255) not null, creation_date timestamp not null, name varchar(255) not null, update_date timestamp, recorder_department_fk int4 not null, recorder_person_fk int4, file_status_fk int4 not null, primary key (id));
create table file_line (id int4 not null, content text not null, line_number int8 not null, file_fk int4 not null, primary key (id));
create table file_status (id int4 not null, comments varchar(2000), creation_date timestamp not null, description varchar(255), label varchar(50) not null, name varchar(100) not null, update_date timestamp, status_fk int4 not null, primary key (id));
create table fishing_area (id int4 not null, qualification_comments varchar(2000), qualification_date timestamp, depth_gradient_fk int4, distance_to_coast_gradient_fk int4, location_fk int4 not null, nearby_specific_area_fk int4, operation_fk int4, quality_flag_fk int4 not null, primary key (id));
create table fraction (id int4 not null, comments varchar(2000), creation_date timestamp not null, description varchar(255), label varchar(50) not null, name varchar(100) not null, update_date timestamp, matrix_fk int4, status_fk int4 not null, primary key (id));
create table gear (id int4 not null, comments varchar(2000), creation_date timestamp not null, description varchar(255), is_active boolean, is_towed boolean, label varchar(50) not null, name varchar(100) not null, update_date timestamp, gear_classification_fk int4 not null, parent_gear_fk int4, status_fk int4 not null, primary key (id));
create table gear_classification (id int4 not null, comments varchar(2000), creation_date timestamp not null, description varchar(255), label varchar(50) not null, name varchar(100) not null, update_date timestamp, status_fk int4 not null, primary key (id));
create table gear_use_measurement (id int4 not null, alphanumerical_value varchar(40), comments varchar(2000), control_date timestamp, digit_count int4, numerical_value float8, precision_value float8, qualification_comments varchar(2000), qualification_date timestamp, rank_order int2, update_date timestamp, operation_fk int4 not null, pmfm_fk int4 not null, qualitative_value_fk int4, quality_flag_fk int4 not null, recorder_department_fk int4 not null, primary key (id));
create table grouping (id int4 not null, comments varchar(2000), creation_date timestamp not null, description varchar(255), label varchar(50) not null, max_value float8, min_value float8, name varchar(100) not null, update_date timestamp, grouping_classification_fk int4 not null, grouping_level_fk int4 not null, parent_grouping_fk int4, status_fk int4 not null, validity_status_fk int4 not null, primary key (id));
create table grouping_classification (id int4 not null, comments varchar(2000), creation_date timestamp not null, description varchar(255), is_mandatory boolean not null, label varchar(50) not null, name varchar(100) not null, object_reference_query varchar(255), update_date timestamp, object_type_fk int4, status_fk int4 not null, primary key (id));
create table grouping_item (id int4 not null, comments varchar(2000), object_id int4, grouping_fk int4 not null, primary key (id));
create table grouping_level (id int4 not null, comments varchar(2000), creation_date timestamp not null, description varchar(255), label varchar(50) not null, name varchar(100) not null, update_date timestamp, grouping_classification_fk int4 not null, parent_grouping_level_fk int4, status_fk int4 not null, primary key (id));
create table image_attachment (id int4 not null, comments varchar(2000), content varchar(20971520), content_type varchar(100) not null, control_date timestamp, creation_date timestamp not null, date_time timestamp, object_id int4, path varchar(255), qualification_comments varchar(2000), qualification_date timestamp, update_date timestamp, validation_date timestamp, object_type_fk int4, quality_flag_fk int4 not null, recorder_department_fk int4 not null, recorder_person_fk int4, primary key (id));
create table landing (id int4 not null, comments varchar(2000), control_date timestamp, creation_date timestamp not null, landing_date_time timestamp not null, qualification_comments varchar(2000), qualification_date timestamp, rank_order int4, update_date timestamp, validation_date timestamp, landing_location_fk int4 not null, observed_location_fk int4, program_fk int4 not null, quality_flag_fk int4 not null, recorder_department_fk int4 not null, recorder_person_fk int4, trip_fk int4, vessel_fk int4 not null, primary key (id));
create table landing2observer_person (landing_fk int4 not null, person_fk int4 not null, primary key (landing_fk, person_fk));
create table landing_measurement (id int4 not null, alphanumerical_value varchar(40), comments varchar(2000), control_date timestamp, digit_count int4, numerical_value float8, precision_value float8, qualification_comments varchar(2000), qualification_date timestamp, rank_order int2, update_date timestamp, landing_fk int4 not null, pmfm_fk int4 not null, qualitative_value_fk int4, quality_flag_fk int4 not null, recorder_department_fk int4 not null, primary key (id));
create table location (id int4 not null, bathymetry float8, comments varchar(2000), creation_date timestamp not null, daylight_saving_time boolean, description varchar(255), label varchar(50) not null, name varchar(100) not null, update_date timestamp, ut_format int2, location_level_fk int4 not null, status_fk int4 not null, validity_status_fk int4 not null, primary key (id));
create table location_area (id int4 not null, position GEOMETRY not null, update_date timestamp, primary key (id));
create table location_association (child_location_fk int4 not null, parent_location_fk int4 not null, child_surface_ratio float8 not null, is_main_association boolean, update_date timestamp, primary key (child_location_fk, parent_location_fk));
create table location_classification (id int4 not null, comments varchar(2000), creation_date timestamp not null, description varchar(255), label varchar(50) not null, name varchar(100) not null, update_date timestamp, status_fk int4 not null, primary key (id));
create table location_hierarchy (child_surface_ratio float8 not null, description varchar(255), is_main_association boolean not null, update_date timestamp, child_location_fk int4 not null, parent_location_fk int4 not null, primary key (parent_location_fk, child_location_fk));
create table location_level (id int4 not null, comments varchar(2000), creation_date timestamp not null, description varchar(255), label varchar(50) not null, name varchar(100) not null, update_date timestamp, location_classification_fk int4, parent_location_level_fk int4, status_fk int4 not null, primary key (id));
create table location_line (id int4 not null, position GEOMETRY not null, update_date timestamp, primary key (id));
create table location_point (id int4 not null, position GEOMETRY not null, update_date timestamp, primary key (id));
create table matrix (id int4 not null, comments varchar(2000), creation_date timestamp not null, description varchar(255), label varchar(50) not null, name varchar(100) not null, update_date timestamp, status_fk int4 not null, primary key (id));
create table method (id int4 not null, comments varchar(2000), creation_date timestamp not null, description varchar(255), is_calculated boolean not null, is_estimated boolean not null, label varchar(50) not null, name varchar(100) not null, update_date timestamp, status_fk int4 not null, primary key (id));
create table metier (id int4 not null, comments varchar(2000), creation_date timestamp not null, description varchar(255), label varchar(50) not null, name varchar(100) not null, update_date timestamp, gear_fk int4, status_fk int4 not null, taxon_group_fk int4, primary key (id));
create table nearby_specific_area (id int4 not null, comments varchar(2000), creation_date timestamp not null, description varchar(255), label varchar(50) not null, name varchar(100) not null, update_date timestamp, status_fk int4 not null, primary key (id));
create table object_type (id int4 not null, comments varchar(2000), creation_date timestamp not null, description varchar(255), label varchar(50) not null, name varchar(100) not null, update_date timestamp, status_fk int4 not null, primary key (id));
create table observed_location (id int4 not null, comments varchar(2000), control_date timestamp, creation_date timestamp not null, end_date_time timestamp not null, qualification_comments varchar(2000), qualification_date timestamp, start_date_time timestamp not null, update_date timestamp, validation_date timestamp, location_fk int4 not null, program_fk int4 not null, quality_flag_fk int4 not null, recorder_department_fk int4 not null, recorder_person_fk int4, primary key (id));
create table observed_location2person (observed_location_fk int4 not null, person_fk int4 not null, primary key (observed_location_fk, person_fk));
create table observed_location_measurement (id int4 not null, alphanumerical_value varchar(40), comments varchar(2000), control_date timestamp, digit_count int4, numerical_value float8, precision_value float8, qualification_comments varchar(2000), qualification_date timestamp, rank_order int2, update_date timestamp, observed_location_fk int4 not null, pmfm_fk int4 not null, qualitative_value_fk int4, quality_flag_fk int4 not null, recorder_department_fk int4 not null, primary key (id));
create table operation (id int4 not null, comments varchar(2000), control_date timestamp, end_date_time timestamp not null, fishing_end_date_time timestamp, fishing_start_date_time timestamp, has_catch boolean, qualification_comments varchar(2000), qualification_date timestamp, rank_order_on_period int4, start_date_time timestamp not null, update_date timestamp, metier_fk int4, operation_fk int4, physical_gear_fk int4, quality_flag_fk int4 not null, recorder_department_fk int4 not null, trip_fk int4 not null, primary key (id));
create table order_item (id int4 not null, object_id int4 not null, rank int4 not null, update_date timestamp, order_type_fk int4 not null, primary key (id));
create table order_type (id int4 not null, comments varchar(2000), creation_date timestamp not null, description varchar(255), label varchar(50) not null, name varchar(100) not null, update_date timestamp, object_type_fk int4, status_fk int4 not null, primary key (id));
create table origin_item_type (id int4 not null, comments varchar(2000), creation_date timestamp not null, description varchar(255), label varchar(50) not null, name varchar(100) not null, update_date timestamp, status_fk int4 not null, primary key (id));
create table p01_rdb_landing (id int4 not null, area varchar(25) not null, commercial_size_category varchar(25), commercial_size_category_scale varchar(25), harbour varchar(25), landing_category varchar(25) not null, landing_country varchar(3) not null, landings_multiplier float8, official_landings_value float8, official_landings_weight float8 not null, eu_metier_level5 varchar(25), eu_metier_level6 varchar(25) not null, area_misreported_catch_weight float8 not null, month int4, national_metier varchar(25), quarter int4 not null, record_type varchar(2) default 'CL' not null, species varchar(25) not null, statistical_rectangle varchar(25), sub_polygon varchar(25), unallocated_catch_weight float8 not null, vessel_flag_country varchar(3) not null, vessel_length_category varchar(25), year int4 not null, primary key (id));
create table p01_rdb_species_length (id int4 not null, catch_category varchar(25) not null, commercial_size_category varchar(25), commercial_size_category_scale varchar(25), individual_sex varchar(1), landing_category varchar(25) not null, landing_country varchar(3) not null, length_class int4, number_at_length int4, project varchar(255) not null, record_type varchar(2) default 'HL' not null, sampling_type varchar(2) not null, sex varchar(1), species varchar(100) not null, station_number int4, subsampling_category varchar(25), trip_code varchar(50) not null, vessel_flag_country varchar(3) not null, year int4 not null, primary key (id));
create table p01_rdb_species_list (id int4 not null, catch_category varchar(25) not null, commercial_size_category varchar(25), commercial_size_category_scale varchar(25), landing_category varchar(25) not null, landing_country varchar(3) not null, length_code varchar(5), project varchar(255) not null, record_type varchar(2) default 'SL' not null, sampling_type varchar(2) not null, sex varchar(1), species varchar(100) not null, station_number int4, subsample_weight float8, subsampling_category varchar(25), trip_code varchar(50) not null, vessel_flag_country varchar(3) not null, weight float8 not null, year int4 not null, primary key (id));
create table p01_rdb_station (id int4 not null, aggregation_level varchar(1), area varchar(25) not null, catch_registration varchar(3) not null, date varchar(10), fishing_time int4, fishing_validity varchar(1), gear_type varchar(5) not null, landing_country varchar(3) not null, main_fishing_depth int4, main_water_depth int4, mesh_size int4, mesh_size_selection_device int4, eu_metier_level5 varchar(25), eu_metier_level6 varchar(25) not null, national_metier varchar(25), pos_end_lat float8, pos_end_lon float8, pos_start_lat float8, pos_start_lon float8, project varchar(255) not null, record_type varchar(2) default 'HH' not null, sampling_type varchar(2) not null, selection_device int4, species_registration varchar(25), station_number int4, statistical_rectangle varchar(25), sub_polygon varchar(25), time varchar(8), trip_code varchar(50) not null, vessel_flag_country varchar(3) not null, year int4 not null, primary key (id));
create table p01_rdb_trip (id int4 not null, days_at_sea int4, harbour varchar(50), landing_country varchar(3) not null, number_of_sets int4, project varchar(255) not null, record_type varchar(2) default 'TR' not null, sampling_country varchar(3) not null, sampling_method varchar(50), sampling_type varchar(2) not null, trip_code varchar(50) not null, vessel_flag_country varchar(3) not null, vessel_identifier int4, vessel_length int4, vessel_power int4, vessel_size int4, vessel_type int4 not null, year int4 not null, primary key (id));
create table parameter (id int4 not null, comments varchar(2000), creation_date timestamp not null, description varchar(255), is_alphanumeric boolean not null, is_boolean boolean, is_date boolean, is_qualitative boolean not null, label varchar(50) not null, name varchar(100) not null, update_date timestamp, parameter_group_fk int4 not null, status_fk int4 not null, primary key (id));
create table parameter_group (id int4 not null, comments varchar(2000), creation_date timestamp not null, description varchar(255), label varchar(50) not null, name varchar(100) not null, parent_parameter_group_fk int4, update_date timestamp, status_fk int4 not null, primary key (id));
create table person (id int4 not null, creation_date timestamp not null, email varchar(255) not null, email_md5 varchar(255), first_name varchar(255) not null, last_name varchar(255) not null, pubkey varchar(255), update_date timestamp, username varchar(40), username_extranet varchar(40), avatar_fk int4, department_fk int4 not null, status_fk int4 not null, primary key (id));
create table person2user_profile (person_fk int4 not null, user_profile_fk int4 not null, primary key (person_fk, user_profile_fk));
create table physical_gear (id int4 not null, comments varchar(2000), control_date timestamp, creation_date timestamp not null, hash int4, qualification_comments varchar(2000), qualification_date timestamp, rank_order int4 not null, update_date timestamp, validation_date timestamp, gear_fk int4 not null, parent_physical_gear_fk int4, program_fk int4 not null, quality_flag_fk int4 not null, recorder_department_fk int4 not null, recorder_person_fk int4, trip_fk int4 not null, primary key (id));
create table physical_gear_measurement (id int4 not null, alphanumerical_value varchar(40), comments varchar(2000), control_date timestamp, digit_count int4, numerical_value float8, precision_value float8, qualification_comments varchar(2000), qualification_date timestamp, rank_order int2, update_date timestamp, physical_gear_fk int4 not null, pmfm_fk int4 not null, qualitative_value_fk int4, quality_flag_fk int4 not null, recorder_department_fk int4 not null, primary key (id));
create table pmfm (id int4 not null, creation_date timestamp not null, default_value float8, detection_threshold float8, label varchar(50), max_value float8, maximum_number_decimals int4, min_value float8, precision float8, signif_figures_number int4, update_date timestamp, fraction_fk int4, matrix_fk int4, method_fk int4, parameter_fk int4 not null, status_fk int4 not null, unit_fk int4 not null, primary key (id));
create table pmfm2qualitative_value (pmfm_fk int4 not null, qualitative_value_fk int4 not null, primary key (pmfm_fk, qualitative_value_fk));
create table pmfm_applied_strategy (applied_strategy_fk int4 not null, pmfm_fk int4 not null, primary key (pmfm_fk, applied_strategy_fk));
create table pmfm_strategy (id int4 not null, acquisition_number int4 not null, default_value float8, is_mandatory boolean not null, max_value float8, min_value float8, rank_order int4 not null, acquisition_level_fk int4 not null, fraction_fk int4, matrix_fk int4, method_fk int4, parameter_fk int4, pmfm_fk int4 not null, strategy_fk int4 not null, primary key (id));
create table pmfm_strategy2gear (pmfm_strategy_fk int4 not null, gear_fk int4 not null, primary key (pmfm_strategy_fk, gear_fk));
create table pmfm_strategy2reference_taxon (pmfm_strategy_fk int4 not null, reference_taxon_fk int4 not null, primary key (pmfm_strategy_fk, reference_taxon_fk));
create table pmfm_strategy2taxon_group (pmfm_strategy_fk int4 not null, taxon_group_fk int4 not null, primary key (pmfm_strategy_fk, taxon_group_fk));
create table processing_frequency (id int4 not null, comments varchar(2000), creation_date timestamp not null, description varchar(255), label varchar(50) not null, name varchar(100) not null, rank_order int4 not null, update_date timestamp, status_fk int4 not null, primary key (id));
create table processing_history (id int4 not null, configuration varchar(255), data_transfert_address varchar(255), data_transfert_date timestamp, data_transfert_type varchar(255), name varchar(100), processing_date timestamp not null, update_date timestamp, xml_configuration varchar(3000), xml_report varchar(3000), processing_status_fk int4 not null, processing_type_fk int4 not null, primary key (id));
create table processing_status (id int4 not null, comments varchar(2000), creation_date timestamp not null, description varchar(255), label varchar(50) not null, name varchar(100) not null, update_date timestamp, status_fk int4 not null, primary key (id));
create table processing_type (id int4 not null, comments varchar(2000), creation_date timestamp not null, description varchar(255), label varchar(50) not null, name varchar(100) not null, update_date timestamp, status_fk int4 not null, primary key (id));
create table product (id int4 not null, comments varchar(2000), control_date timestamp, cost float8, individual_count int4, label varchar(40), qualification_comments varchar(2000), qualification_date timestamp, rank_order int4, subgroup_count float8, update_date timestamp, validation_date timestamp, weight float8, batch_fk int4, dressing_fk int4, expected_sale_fk int4, landing_fk int4, operation_fk int4, preservation_fk int4, quality_flag_fk int4 not null, recorder_department_fk int4 not null, recorder_person_fk int4, sale_fk int4, sale_type_fk int4, size_category_fk int4, taxon_group_fk int4, weight_method_fk int4, primary key (id));
create table program (id int4 not null, comments varchar(2000), creation_date timestamp not null, description varchar(255), label varchar(50) not null, name varchar(100) not null, update_date timestamp, gear_classification_fk int4 not null, status_fk int4 not null, taxon_group_type_fk int4 not null, primary key (id));
create table program2department (id int4 not null, update_date timestamp, department_fk int4 not null, location_fk int4, program_privilege_fk int4 not null, program_fk int4 not null, primary key (id));
create table program2location (program_fk int4 not null, location_fk int4 not null, primary key (program_fk, location_fk));
create table program2location_classif (program_fk int4 not null, location_classification_fk int4 not null, primary key (program_fk, location_classification_fk));
create table program2person (id int4 not null, update_date timestamp, location_fk int4, person_fk int4 not null, program_privilege_fk int4 not null, program_fk int4 not null, reference_person_fk int4, primary key (id));
create table program_privilege (id int4 not null, comments varchar(2000), creation_date timestamp not null, description varchar(255), label varchar(50) not null, name varchar(100) not null, update_date timestamp, status_fk int4 not null, primary key (id));
create table program_property (id int4 not null, creation_date timestamp not null, label varchar(255) not null, name varchar(255) not null, update_date timestamp, program_fk int4 not null, status_fk int4 not null, primary key (id));
create table qualitative_value (id int4 not null, comments varchar(2000), creation_date timestamp not null, description varchar(255), label varchar(50) not null, name varchar(100) not null, update_date timestamp, parameter_fk int4, status_fk int4 not null, primary key (id));
create table quality_flag (id int4 not null, comments varchar(2000), creation_date timestamp not null, description varchar(255), label varchar(50) not null, name varchar(100) not null, update_date timestamp, status_fk int4 not null, primary key (id));
create table quantification_measurement_b (id int4 not null, alphanumerical_value varchar(40), comments varchar(2000), control_date timestamp, digit_count int4, is_reference_quantification boolean not null, numerical_value float8, precision_value float8, qualification_comments varchar(2000), qualification_date timestamp, subgroup_number int2, update_date timestamp, batch_fk int4, pmfm_fk int4 not null, qualitative_value_fk int4, quality_flag_fk int4 not null, recorder_department_fk int4 not null, primary key (id));
create table quantification_measurement_p (id int4 not null, alphanumerical_value varchar(40), comments varchar(2000), control_date timestamp, digit_count int4, is_reference_quantification boolean not null, numerical_value float8, precision_value float8, qualification_comments varchar(2000), qualification_date timestamp, subgroup_number int2, update_date timestamp, pmfm_fk int4 not null, product_fk int4, qualitative_value_fk int4, quality_flag_fk int4 not null, recorder_department_fk int4 not null, primary key (id));
create table reference_taxon (id int4 not null, update_date timestamp, primary key (id));
create table reference_taxon_strategy (priority_level int4, strategy_fk int4 not null, reference_taxon_fk int4 not null, primary key (strategy_fk, reference_taxon_fk));
create table round_weight_conversion (id int4 not null, comments varchar(2000), conversion_coefficient float8 not null, creation_date timestamp not null, description varchar(255), end_date timestamp, start_date timestamp not null, update_date timestamp, dressing_fk int4 not null, location_fk int4 not null, origin_item_type_fk int4, preserving_fk int4 not null, status_fk int4 not null, taxon_group_fk int4 not null, primary key (id));
create table sale (id int4 not null, comments varchar(2000), control_date timestamp, creation_date timestamp not null, end_date_time timestamp, qualification_comments varchar(2000), qualification_date timestamp, start_date_time timestamp not null, update_date timestamp, validation_date timestamp, observed_location_fk int4, program_fk int4 not null, quality_flag_fk int4 not null, recorder_department_fk int4 not null, recorder_person_fk int4, sale_location_fk int4 not null, sale_type_fk int4 not null, trip_fk int4, vessel_fk int4 not null, primary key (id));
create table sale2observer_person (sale_fk int4 not null, person_fk int4 not null, primary key (sale_fk, person_fk));
create table sale_measurement (id int4 not null, alphanumerical_value varchar(40), comments varchar(2000), control_date timestamp, digit_count int4, numerical_value float8, precision_value float8, qualification_comments varchar(2000), qualification_date timestamp, rank_order int2, update_date timestamp, expected_sale_fk int4, pmfm_fk int4 not null, qualitative_value_fk int4, quality_flag_fk int4 not null, recorder_department_fk int4 not null, sale_fk int4, primary key (id));
create table sale_type (id int4 not null, comments varchar(2000), creation_date timestamp not null, description varchar(255), label varchar(50) not null, name varchar(100) not null, update_date timestamp, status_fk int4 not null, primary key (id));
create table sample (id int4 not null, comments varchar(2000), control_date timestamp, creation_date timestamp not null, hash int4, individual_count int4, label varchar(40) not null, qualification_comments varchar(2000), qualification_date timestamp, rank_order int4 not null, sample_date timestamp, sample_size float8, update_date timestamp, validation_date timestamp, batch_fk int4, landing_fk int4, matrix_fk int4 not null, operation_fk int4, parent_sample_fk int4, program_fk int4 not null, quality_flag_fk int4 not null, recorder_department_fk int4 not null, recorder_person_fk int4, reference_taxon_fk int4, size_unit_fk int4, taxon_group_fk int4, primary key (id));
create table sample_measurement (id int4 not null, alphanumerical_value varchar(40), comments varchar(2000), control_date timestamp, digit_count int4, individual_number int4, numerical_value float8, precision_value float8, qualification_comments varchar(2000), qualification_date timestamp, rank_order int2, update_date timestamp, pmfm_fk int4 not null, qualitative_value_fk int4, quality_flag_fk int4 not null, recorder_department_fk int4 not null, sample_fk int4, primary key (id));
create table software (id int4 not null, comments varchar(2000), creation_date timestamp not null, description varchar(255), label varchar(50) not null, name varchar(100) not null, update_date timestamp, status_fk int4 not null, primary key (id));
create table software_property (id int4 not null, creation_date timestamp not null, label varchar(255) not null, name varchar(2000) not null, update_date timestamp, software_fk int4 not null, status_fk int4 not null, primary key (id));
create table sorting_measurement_b (id int4 not null, alphanumerical_value varchar(40), comments varchar(2000), control_date timestamp, digit_count int4, numerical_value float8, precision_value float8, qualification_comments varchar(2000), qualification_date timestamp, rank_order int2 not null, update_date timestamp, batch_fk int4, pmfm_fk int4 not null, qualitative_value_fk int4, quality_flag_fk int4 not null, recorder_department_fk int4 not null, primary key (id));
create table sorting_measurement_p (id int4 not null, alphanumerical_value varchar(40), comments varchar(2000), control_date timestamp, digit_count int4, numerical_value float8, precision_value float8, qualification_comments varchar(2000), qualification_date timestamp, rank_order int2 not null, update_date timestamp, pmfm_fk int4 not null, product_fk int4, qualitative_value_fk int4, quality_flag_fk int4 not null, recorder_department_fk int4 not null, primary key (id));
create table status (id int4 not null, creation_date timestamp not null, label varchar(255) not null, name varchar(255) not null, update_date timestamp, primary key (id));
create table strategy (id int4 not null, analytic_reference varchar(255), comments varchar(2000), creation_date timestamp not null, description varchar(255), label varchar(50) not null, name varchar(100) not null, update_date timestamp, program_fk int4 not null, status_fk int4 not null, primary key (id));
create table strategy2department (id int4 not null, update_date timestamp, department_fk int4 not null, location_fk int4, program_privilege_fk int4 not null, strategy_fk int4 not null, primary key (id));
create table strategy2gear (strategy_fk int4 not null, gear_fk int4 not null, primary key (strategy_fk, gear_fk));
create table survey_measurement (id int4 not null, alphanumerical_value varchar(40), comments varchar(2000), control_date timestamp, digit_count int4, numerical_value float8, precision_value float8, qualification_comments varchar(2000), qualification_date timestamp, rank_order int2, update_date timestamp, landing_fk int4 not null, pmfm_fk int4 not null, qualitative_value_fk int4, quality_flag_fk int4 not null, recorder_department_fk int4 not null, primary key (id));
create table system_version (id int4 not null, comments varchar(2000), creation_date timestamp not null, description varchar(255), label varchar(50) not null, update_date timestamp, primary key (id));
create table taxon_group (id int4 not null, comments varchar(2000), creation_date timestamp not null, description varchar(255), label varchar(50), name varchar(100) not null, update_date timestamp, parent_taxon_group_fk int4, status_fk int4 not null, taxon_group_type_fk int4 not null, primary key (id));
create table taxon_group2taxon_hierarchy (start_date timestamp not null, end_date timestamp, is_inherited boolean not null, parent_taxon_group_fk int4 not null, child_reference_taxon_fk int4 not null, primary key (start_date, parent_taxon_group_fk, child_reference_taxon_fk));
create table taxon_group_hierarchy (child_taxon_group_fk int4 not null, parent_taxon_group_fk int4 not null, primary key (parent_taxon_group_fk, child_taxon_group_fk));
create table taxon_group_historical_record (id int4 not null, comments varchar(2000), end_date timestamp, start_date timestamp not null, update_date timestamp, reference_taxon_fk int4 not null, taxon_group_fk int4 not null, primary key (id));
create table taxon_group_strategy (priority_level int4, strategy_fk int4 not null, taxon_group_fk int4 not null, primary key (taxon_group_fk, strategy_fk));
create table taxon_group_type (id int4 not null, comments varchar(2000), creation_date timestamp not null, description varchar(255), label varchar(50) not null, name varchar(100) not null, update_date timestamp, status_fk int4 not null, primary key (id));
create table taxon_name (id int4 not null, comments varchar(2000), complete_name varchar(100), creation_date timestamp not null, description varchar(255), end_date timestamp, is_naming boolean not null, is_referent boolean not null, is_virtual boolean not null, label varchar(50), name varchar(100) not null, start_date timestamp, update_date timestamp, upper_rank int4, parent_taxon_name_fk int4, reference_taxon_fk int4 not null, status_fk int4 not null, taxonomic_level_fk int4 not null, primary key (id));
create table taxonomic_level (id int4 not null, comments varchar(2000), creation_date timestamp not null, description varchar(255), label varchar(50) not null, name varchar(100) not null, rank_order int4 not null, update_date timestamp, status_fk int4 not null, primary key (id));
create table transcribing_item (id int4 not null, comments varchar(2000), creation_date timestamp not null, description varchar(255), label varchar(50) not null, name varchar(100) not null, object_id int4, update_date timestamp, status_fk int4 not null, transcribing_item_type_fk int4 not null, primary key (id));
create table transcribing_item_type (id int4 not null, comments varchar(2000), creation_date timestamp not null, description varchar(255), label varchar(50) not null, name varchar(100) not null, update_date timestamp, object_type_fk int4, status_fk int4 not null, transcribing_system_fk int4, primary key (id));
create table transcribing_system (id int4 not null, comments varchar(2000), creation_date timestamp not null, description varchar(255), label varchar(50) not null, name varchar(100) not null, update_date timestamp, status_fk int4 not null, primary key (id));
create table trip (id int4 not null, comments varchar(2000), control_date timestamp, creation_date timestamp not null, departure_date_time timestamp not null, qualification_comments varchar(2000), qualification_date timestamp, return_date_time timestamp not null, update_date timestamp, validation_date timestamp, departure_location_fk int4 not null, program_fk int4 not null, quality_flag_fk int4 not null, recorder_department_fk int4 not null, recorder_person_fk int4, return_location_fk int4 not null, vessel_fk int4 not null, primary key (id));
create table trip2observer_person (trip_fk int4 not null, person_fk int4 not null, primary key (trip_fk, person_fk));
create table unit (id int4 not null, creation_date timestamp not null, label varchar(50), name varchar(100) not null, update_date timestamp, status_fk int4 not null, primary key (id));
create table unit_conversion (conversion_coefficient float8 not null, creation_date timestamp not null, update_date timestamp, from_unit_fk int4 not null, to_unit_fk int4 not null, primary key (to_unit_fk, from_unit_fk));
create table user_event (id int4 not null, content varchar(20971520), creation_date timestamp not null, hash varchar(100), issuer varchar(100) not null, event_level varchar(50) not null, read_date timestamp, read_signature varchar(100), recipient varchar(100) not null, signature varchar(100), source varchar(50), event_type varchar(50) not null, update_date timestamp, primary key (id));
create table user_interaction (id int4 not null, comment varchar(2000), creation_date timestamp not null, hash varchar(100), interaction_type varchar(30) not null, issuer varchar(100) not null, object_id int4 not null, signature varchar(100), update_date timestamp, object_type_fk int4 not null, primary key (id));
create table user_profile (id int4 not null, creation_date timestamp not null, label varchar(50) not null, name varchar(100) not null, update_date timestamp, status_fk int4 not null, primary key (id));
create table user_settings (id int4 not null, content varchar(5000), issuer varchar(255) not null, lat_long_format varchar(6), locale varchar(10) not null, nonce varchar(255), update_date timestamp, primary key (id));
create table user_token (id int4 not null, creation_date timestamp not null, pubkey varchar(255) not null, token varchar(255) not null, primary key (id));
create table validity_status (id int4 not null, creation_date timestamp not null, label varchar(255) not null, name varchar(255) not null, update_date timestamp, primary key (id));
create table vessel (id int4 not null, comments varchar(2000), control_date timestamp, creation_date timestamp not null, qualification_comments varchar(2000), qualification_date timestamp, update_date timestamp, validation_date timestamp, program_fk int4 not null, quality_flag_fk int4 not null, recorder_department_fk int4 not null, recorder_person_fk int4, status_fk int4 not null, vessel_type_fk int4 not null, primary key (id));
create table vessel_features (id int4 not null, administrative_power int4, auxiliary_power int4, comments varchar(2000), construction_year int4, control_date timestamp, creation_date timestamp not null, end_date timestamp, exterior_marking varchar(255), gross_tonnage_grt int4, gross_tonnage_gt int4, ircs varchar(10),is_pfc boolean, length_over_all int4, name varchar(255), qualification_comments varchar(2000), qualification_date timestamp, start_date timestamp not null, update_date timestamp, validation_date timestamp, base_port_location_fk int4 not null, hull_material_qv_fk int4, quality_flag_fk int4 not null, recorder_department_fk int4 not null, recorder_person_fk int4, vessel_fk int4 not null, primary key (id));
create table vessel_owner (id int4 not null, activity_start_date timestamp, city varchar(255), date_of_birth timestamp, email varchar(255), fax_number varchar(50), first_name varchar(100), last_name varchar(100), mobile_number varchar(50), phone_number varchar(50), registration_code varchar(40), retirement_date timestamp, street varchar(255), update_date timestamp, zip_code varchar(255), country_location_fk int4, program_fk int4 not null, primary key (id));
create table vessel_owner_period (start_date date not null, end_date date, vessel_owner_fk int4 not null, vessel_fk int4 not null, primary key (vessel_owner_fk, vessel_fk, start_date));
create table vessel_physical_measurement (id int4 not null, alphanumerical_value varchar(40), comments varchar(2000), control_date timestamp, digit_count int4, numerical_value float8, precision_value float8, qualification_comments varchar(2000), qualification_date timestamp, update_date timestamp, pmfm_fk int4 not null, qualitative_value_fk int4, quality_flag_fk int4 not null, recorder_department_fk int4 not null, vessel_features_fk int4, primary key (id));
create table vessel_position (id int4 not null, control_date timestamp, date_time timestamp not null, latitude float8 not null, longitude float8 not null, qualification_comments varchar(2000), qualification_date timestamp, update_date timestamp, validation_date timestamp, operation_fk int4, quality_flag_fk int4 not null, recorder_department_fk int4 not null, primary key (id));
create table vessel_registration_period (id int4 not null, end_date date, int_registration_code varchar(40), rank_order int4 not null, registration_code varchar(40), start_date date not null, quality_flag_fk int4 not null, registration_location_fk int4 not null, vessel_fk int4 not null, primary key (id));
create table vessel_type (id int4 not null, comments varchar(2000), creation_date timestamp not null, description varchar(255), label varchar(50) not null, name varchar(100) not null, update_date timestamp, status_fk int4 not null, primary key (id));
create table vessel_use_measurement (id int4 not null, alphanumerical_value varchar(40), comments varchar(2000), control_date timestamp, digit_count int4, numerical_value float8, precision_value float8, qualification_comments varchar(2000), qualification_date timestamp, rank_order int2, update_date timestamp, operation_fk int4, pmfm_fk int4 not null, qualitative_value_fk int4, quality_flag_fk int4 not null, recorder_department_fk int4 not null, trip_fk int4, primary key (id));
create table virtual_component (taxon_name_fk int4 not null, reference_taxon_fk int4 not null, primary key (taxon_name_fk, reference_taxon_fk));
create table weight_length_conversion (id int4 not null, comments varchar(2000), conversion_coefficient_a float8 not null, conversion_coefficient_b float8 not null, creation_date timestamp not null, description varchar(255), end_month int4 not null, start_month int4 not null, update_date timestamp, year int4, length_parameter_fk int4 not null, length_unit_fk int4 not null, location_fk int4 not null, origin_item_type_fk int4, reference_taxon_fk int4 not null, sex_qualitative_value_fk int4, status_fk int4 not null, primary key (id));
alter table if exists grouping add constraint grouping_unique_c unique (label, grouping_level_fk);
create index image_attachment_object_idx on image_attachment (object_type_fk, object_id);
alter table if exists operation add constraint UK_m47m7999l8hu5odp8vcc01i42 unique (operation_fk);
alter table if exists parameter add constraint UK_cb7yusyni4xxoeaj8jj7i8l4y unique (label);
alter table if exists parameter_group add constraint UK_qnpgch16596uqx6qj4kegk1qm unique (label);
alter table if exists person add constraint UK_fwmwi44u55bo4rvwsv0cln012 unique (email);
alter table if exists person add constraint UK_bangfqqb4aq3t0r9d0hf9yutf unique (email_md5);
alter table if exists person add constraint UK_c51o6x6ivu8gpa72jfnkggr2h unique (pubkey);
alter table if exists pmfm add constraint pmfm_unique_c unique (parameter_fk, matrix_fk, fraction_fk, method_fk, unit_fk);
alter table if exists pmfm add constraint UK_mnw1afwrc6nlus1qnwebuq7q2 unique (label);
create index processing_history_address_idx on processing_history (data_transfert_address);
alter table if exists software add constraint UK_mb2geqcj4jl21o2m8ye2gypta unique (label);
create index user_event_source_idx on user_event (source);
create index user_event_recipient_idx on user_event (recipient);
alter table if exists user_settings add constraint UK_pc085eos5up2vi2qdc3h66oxr unique (issuer);
alter table if exists user_token add constraint UK_rif72qe73gbnjan23nhglof67 unique (token);
alter table if exists acquisition_level add constraint acquisition_level_status_fkc foreign key (status_fk) references status;
alter table if exists applied_period add constraint applied_period_applied_strategy_fkc foreign key (applied_strategy_fk) references applied_strategy;
alter table if exists applied_strategy add constraint applied_strategy_location_fkc foreign key (location_fk) references location;
alter table if exists applied_strategy add constraint applied_strategy_strategy_fkc foreign key (strategy_fk) references strategy;
alter table if exists batch add constraint batch_operation_fkc foreign key (operation_fk) references operation;
alter table if exists batch add constraint batch_parent_batch_fkc foreign key (parent_batch_fk) references batch;
alter table if exists batch add constraint batch_quality_flag_fkc foreign key (quality_flag_fk) references quality_flag;
alter table if exists batch add constraint batch_recorder_department_fkc foreign key (recorder_department_fk) references department;
alter table if exists batch add constraint batch_reference_taxon_fkc foreign key (reference_taxon_fk) references reference_taxon;
alter table if exists batch add constraint batch_sale_fkc foreign key (sale_fk) references sale;
alter table if exists batch add constraint batch_taxon_group_fkc foreign key (taxon_group_fk) references taxon_group;
alter table if exists denormalized_batch add constraint denormalized_batch_calculated_taxon_group_fkc foreign key (calculated_taxon_group_fk) references taxon_group;
alter table if exists denormalized_batch add constraint denormalized_batch_inherited_reference_taxon_fkc foreign key (inherited_reference_taxon_fk) references reference_taxon;
alter table if exists denormalized_batch add constraint denormalized_batch_inherited_taxon_group_fkc foreign key (inherited_taxon_group_fk) references taxon_group;
alter table if exists denormalized_batch add constraint denormalized_batch_operation_fkc foreign key (operation_fk) references operation;
alter table if exists denormalized_batch add constraint denormalized_batch_parent_batch_fkc foreign key (parent_batch_fk) references denormalized_batch;
alter table if exists denormalized_batch add constraint denormalized_batch_quality_flag_fkc foreign key (quality_flag_fk) references quality_flag;
alter table if exists denormalized_batch add constraint denormalized_batch_reference_taxon_fkc foreign key (reference_taxon_fk) references reference_taxon;
alter table if exists denormalized_batch add constraint denormalized_batch_sale_fkc foreign key (sale_fk) references sale;
alter table if exists denormalized_batch add constraint denormalized_batch_taxon_group_fkc foreign key (taxon_group_fk) references taxon_group;
alter table if exists denormalized_batch add constraint denormalized_batch_weight_method_fkc foreign key (weight_method_fk) references method;
alter table if exists denormalized_batch_sort_val add constraint denormalized_batch_sort_val_batch_fkc foreign key (batch_fk) references denormalized_batch;
alter table if exists denormalized_batch_sort_val add constraint denormalized_batch_sort_val_parameter_fkc foreign key (parameter_fk) references parameter;
alter table if exists denormalized_batch_sort_val add constraint denormalized_batch_sort_val_pmfm_fkc foreign key (pmfm_fk) references pmfm;
alter table if exists denormalized_batch_sort_val add constraint denormalized_batch_sort_val_qualitative_value_fkc foreign key (qualitative_value_fk) references qualitative_value;
alter table if exists denormalized_batch_sort_val add constraint denormalized_batch_sort_val_unit_fkc foreign key (unit_fk) references unit;
alter table if exists department add constraint department_location_fkc foreign key (location_fk) references location;
alter table if exists department add constraint department_logo_fkc foreign key (logo_fk) references image_attachment;
alter table if exists department add constraint department_status_fkc foreign key (status_fk) references status;
alter table if exists depth_gradient add constraint depth_gradient_status_fkc foreign key (status_fk) references status;
alter table if exists device_position add constraint device_position_object_type_fkc foreign key (object_type_fk) references object_type;
alter table if exists device_position add constraint device_position_quality_flag_fkc foreign key (quality_flag_fk) references quality_flag;
alter table if exists device_position add constraint device_position_recorder_department_fkc foreign key (recorder_department_fk) references department;
alter table if exists device_position add constraint device_position_recorder_person_fkc foreign key (recorder_person_fk) references person;
alter table if exists distance_to_coast_gradient add constraint distance_to_coast_gradient_status_fkc foreign key (status_fk) references status;
alter table if exists expected_sale add constraint expected_sale_landing_fkc foreign key (landing_fk) references landing;
alter table if exists expected_sale add constraint expected_sale_sale_location_fkc foreign key (sale_location_fk) references location;
alter table if exists expected_sale add constraint expected_sale_sale_type_fkc foreign key (sale_type_fk) references sale_type;
alter table if exists expected_sale add constraint expected_sale_trip_fkc foreign key (trip_fk) references trip;
alter table if exists extraction_product add constraint extraction_product_parent_extraction_product_fkc foreign key (parent_extraction_product_fk) references extraction_product;
alter table if exists extraction_product add constraint extraction_product_processing_frequency_fkc foreign key (processing_frequency_fk) references processing_frequency;
alter table if exists extraction_product add constraint extraction_product_recorder_department_fkc foreign key (recorder_department_fk) references department;
alter table if exists extraction_product add constraint extraction_product_recorder_person_fkc foreign key (recorder_person_fk) references person;
alter table if exists extraction_product add constraint extraction_product_status_fkc foreign key (status_fk) references status;
alter table if exists extraction_product_column add constraint extraction_product_column_extraction_product_table_fkc foreign key (extraction_product_table_fk) references extraction_product_table;
alter table if exists extraction_product_strata add constraint extraction_product_strata_agg_extraction_column_fkc foreign key (agg_extraction_column_fk) references extraction_product_column;
alter table if exists extraction_product_strata add constraint extraction_product_strata_extraction_product_fkc foreign key (extraction_product_fk) references extraction_product;
alter table if exists extraction_product_strata add constraint extraction_product_strata_space_extraction_column_fkc foreign key (space_extraction_column_fk) references extraction_product_column;
alter table if exists extraction_product_strata add constraint extraction_product_strata_status_fkc foreign key (status_fk) references status;
alter table if exists extraction_product_strata add constraint extraction_product_strata_extraction_table_fkc foreign key (extraction_table_fk) references extraction_product_table;
alter table if exists extraction_product_strata add constraint extraction_product_strata_tech_extraction_column_fkc foreign key (tech_extraction_column_fk) references extraction_product_column;
alter table if exists extraction_product_strata add constraint extraction_product_strata_time_extraction_column_fkc foreign key (time_extraction_column_fk) references extraction_product_column;
alter table if exists extraction_product_table add constraint extraction_product_table_extraction_product_fkc foreign key (extraction_product_fk) references extraction_product;
alter table if exists extraction_product_table add constraint extraction_product_table_status_fkc foreign key (status_fk) references status;
alter table if exists extraction_product_value add constraint extraction_product_value_extraction_product_column_fkc foreign key (extraction_product_column_fk) references extraction_product_column;
alter table if exists file add constraint file_recorder_department_fkc foreign key (recorder_department_fk) references department;
alter table if exists file add constraint file_recorder_person_fkc foreign key (recorder_person_fk) references person;
alter table if exists file add constraint file_file_status_fkc foreign key (file_status_fk) references file_status;
alter table if exists file_line add constraint file_line_file_fkc foreign key (file_fk) references file;
alter table if exists file_status add constraint file_status_status_fkc foreign key (status_fk) references status;
alter table if exists fishing_area add constraint fishing_area_depth_gradient_fkc foreign key (depth_gradient_fk) references depth_gradient;
alter table if exists fishing_area add constraint fishing_area_distance_to_coast_gradient_fkc foreign key (distance_to_coast_gradient_fk) references distance_to_coast_gradient;
alter table if exists fishing_area add constraint fishing_area_location_fkc foreign key (location_fk) references location;
alter table if exists fishing_area add constraint fishing_area_nearby_specific_area_fkc foreign key (nearby_specific_area_fk) references nearby_specific_area;
alter table if exists fishing_area add constraint fishing_area_operation_fkc foreign key (operation_fk) references operation;
alter table if exists fishing_area add constraint fishing_area_quality_flag_fkc foreign key (quality_flag_fk) references quality_flag;
alter table if exists fraction add constraint fraction_matrix_fkc foreign key (matrix_fk) references matrix;
alter table if exists fraction add constraint fraction_status_fkc foreign key (status_fk) references status;
alter table if exists gear add constraint gear_gear_classification_fkc foreign key (gear_classification_fk) references gear_classification;
alter table if exists gear add constraint gear_parent_gear_fkc foreign key (parent_gear_fk) references gear;
alter table if exists gear add constraint gear_status_fkc foreign key (status_fk) references status;
alter table if exists gear_classification add constraint gear_classification_status_fkc foreign key (status_fk) references status;
alter table if exists gear_use_measurement add constraint gear_use_measurement_operation_fkc foreign key (operation_fk) references operation;
alter table if exists gear_use_measurement add constraint gear_use_measurement_pmfm_fkc foreign key (pmfm_fk) references pmfm;
alter table if exists gear_use_measurement add constraint gear_use_measurement_qualitative_value_fkc foreign key (qualitative_value_fk) references qualitative_value;
alter table if exists gear_use_measurement add constraint gear_use_measurement_quality_flag_fkc foreign key (quality_flag_fk) references quality_flag;
alter table if exists gear_use_measurement add constraint gear_use_measurement_recorder_department_fkc foreign key (recorder_department_fk) references department;
alter table if exists grouping add constraint grouping_grouping_classification_fkc foreign key (grouping_classification_fk) references grouping_classification;
alter table if exists grouping add constraint grouping_grouping_level_fkc foreign key (grouping_level_fk) references grouping_level;
alter table if exists grouping add constraint grouping_parent_grouping_fkc foreign key (parent_grouping_fk) references grouping;
alter table if exists grouping add constraint grouping_status_fkc foreign key (status_fk) references status;
alter table if exists grouping add constraint grouping_validity_status_fkc foreign key (validity_status_fk) references validity_status;
alter table if exists grouping_classification add constraint grouping_classification_object_type_fkc foreign key (object_type_fk) references object_type;
alter table if exists grouping_classification add constraint grouping_classification_status_fkc foreign key (status_fk) references status;
alter table if exists grouping_item add constraint grouping_item_grouping_fkc foreign key (grouping_fk) references grouping;
alter table if exists grouping_level add constraint grouping_level_grouping_classification_fkc foreign key (grouping_classification_fk) references grouping_classification;
alter table if exists grouping_level add constraint grouping_level_parent_grouping_level_fkc foreign key (parent_grouping_level_fk) references grouping_level;
alter table if exists grouping_level add constraint grouping_level_status_fkc foreign key (status_fk) references status;
alter table if exists image_attachment add constraint image_attachment_object_type_fkc foreign key (object_type_fk) references object_type;
alter table if exists image_attachment add constraint image_attachment_quality_flag_fkc foreign key (quality_flag_fk) references quality_flag;
alter table if exists image_attachment add constraint image_attachment_recorder_department_fkc foreign key (recorder_department_fk) references department;
alter table if exists image_attachment add constraint image_attachment_recorder_person_fkc foreign key (recorder_person_fk) references person;
alter table if exists landing add constraint landing_landing_location_fkc foreign key (landing_location_fk) references location;
alter table if exists landing add constraint landing_observed_location_fkc foreign key (observed_location_fk) references observed_location;
alter table if exists landing add constraint landing_program_fkc foreign key (program_fk) references program;
alter table if exists landing add constraint landing_quality_flag_fkc foreign key (quality_flag_fk) references quality_flag;
alter table if exists landing add constraint landing_recorder_department_fkc foreign key (recorder_department_fk) references department;
alter table if exists landing add constraint landing_recorder_person_fkc foreign key (recorder_person_fk) references person;
alter table if exists landing add constraint landing_trip_fkc foreign key (trip_fk) references trip;
alter table if exists landing add constraint landing_vessel_fkc foreign key (vessel_fk) references vessel;
alter table if exists landing2observer_person add constraint landing2observer_person_person_fkc foreign key (person_fk) references person;
alter table if exists landing2observer_person add constraint landing2observer_person_landing_fkc foreign key (landing_fk) references landing;
alter table if exists landing_measurement add constraint landing_measurement_landing_fkc foreign key (landing_fk) references landing;
alter table if exists landing_measurement add constraint landing_measurement_pmfm_fkc foreign key (pmfm_fk) references pmfm;
alter table if exists landing_measurement add constraint landing_measurement_qualitative_value_fkc foreign key (qualitative_value_fk) references qualitative_value;
alter table if exists landing_measurement add constraint landing_measurement_quality_flag_fkc foreign key (quality_flag_fk) references quality_flag;
alter table if exists landing_measurement add constraint landing_measurement_recorder_department_fkc foreign key (recorder_department_fk) references department;
alter table if exists location add constraint location_location_level_fkc foreign key (location_level_fk) references location_level;
alter table if exists location add constraint location_status_fkc foreign key (status_fk) references status;
alter table if exists location add constraint location_validity_status_fkc foreign key (validity_status_fk) references validity_status;
alter table if exists location_association add constraint location_association_child_location_fkc foreign key (child_location_fk) references location;
alter table if exists location_association add constraint location_association_parent_location_fkc foreign key (parent_location_fk) references location;
alter table if exists location_classification add constraint location_classification_status_fkc foreign key (status_fk) references status;
alter table if exists location_hierarchy add constraint location_hierarchy_child_location_fkc foreign key (child_location_fk) references location;
alter table if exists location_hierarchy add constraint location_hierarchy_parent_location_fkc foreign key (parent_location_fk) references location;
alter table if exists location_level add constraint location_level_location_classification_fkc foreign key (location_classification_fk) references location_classification;
alter table if exists location_level add constraint location_level_parent_location_level_fkc foreign key (parent_location_level_fk) references location_level;
alter table if exists location_level add constraint location_level_status_fkc foreign key (status_fk) references status;
alter table if exists matrix add constraint matrix_status_fkc foreign key (status_fk) references status;
alter table if exists method add constraint method_status_fkc foreign key (status_fk) references status;
alter table if exists metier add constraint metier_gear_fkc foreign key (gear_fk) references gear;
alter table if exists metier add constraint metier_status_fkc foreign key (status_fk) references status;
alter table if exists metier add constraint metier_taxon_group_fkc foreign key (taxon_group_fk) references taxon_group;
alter table if exists nearby_specific_area add constraint nearby_specific_area_status_fkc foreign key (status_fk) references status;
alter table if exists object_type add constraint object_type_status_fkc foreign key (status_fk) references status;
alter table if exists observed_location add constraint observed_location_location_fkc foreign key (location_fk) references location;
alter table if exists observed_location add constraint observed_location_program_fkc foreign key (program_fk) references program;
alter table if exists observed_location add constraint observed_location_quality_flag_fkc foreign key (quality_flag_fk) references quality_flag;
alter table if exists observed_location add constraint observed_location_recorder_department_fkc foreign key (recorder_department_fk) references department;
alter table if exists observed_location add constraint observed_location_recorder_person_fkc foreign key (recorder_person_fk) references person;
alter table if exists observed_location2person add constraint observed_location2person_person_fkc foreign key (person_fk) references person;
alter table if exists observed_location2person add constraint observed_location2person_observed_location_fkc foreign key (observed_location_fk) references observed_location;
alter table if exists observed_location_measurement add constraint observed_location_measurement_observed_location_fkc foreign key (observed_location_fk) references observed_location;
alter table if exists observed_location_measurement add constraint observed_location_measurement_pmfm_fkc foreign key (pmfm_fk) references pmfm;
alter table if exists observed_location_measurement add constraint observed_location_measurement_qualitative_value_fkc foreign key (qualitative_value_fk) references qualitative_value;
alter table if exists observed_location_measurement add constraint observed_location_measurement_quality_flag_fkc foreign key (quality_flag_fk) references quality_flag;
alter table if exists observed_location_measurement add constraint observed_location_measurement_recorder_department_fkc foreign key (recorder_department_fk) references department;
alter table if exists operation add constraint operation_metier_fkc foreign key (metier_fk) references metier;
alter table if exists operation add constraint operation_operation_fkc foreign key (operation_fk) references operation;
alter table if exists operation add constraint operation_physical_gear_fkc foreign key (physical_gear_fk) references physical_gear;
alter table if exists operation add constraint operation_quality_flag_fkc foreign key (quality_flag_fk) references quality_flag;
alter table if exists operation add constraint operation_recorder_department_fkc foreign key (recorder_department_fk) references department;
alter table if exists operation add constraint operation_trip_fkc foreign key (trip_fk) references trip;
alter table if exists order_item add constraint order_item_order_type_fkc foreign key (order_type_fk) references order_type;
alter table if exists order_type add constraint order_type_object_type_fkc foreign key (object_type_fk) references object_type;
alter table if exists order_type add constraint order_type_status_fkc foreign key (status_fk) references status;
alter table if exists origin_item_type add constraint origin_item_type_status_fkc foreign key (status_fk) references status;
alter table if exists parameter add constraint parameter_parameter_group_fkc foreign key (parameter_group_fk) references parameter_group;
alter table if exists parameter add constraint parameter_status_fkc foreign key (status_fk) references status;
alter table if exists parameter_group add constraint parameter_group_status_fkc foreign key (status_fk) references status;
alter table if exists person add constraint person_avatar_fkc foreign key (avatar_fk) references image_attachment;
alter table if exists person add constraint person_department_fkc foreign key (department_fk) references department;
alter table if exists person add constraint person_status_fkc foreign key (status_fk) references status;
alter table if exists person2user_profile add constraint person2user_profile_user_profile_fkc foreign key (user_profile_fk) references user_profile;
alter table if exists person2user_profile add constraint person2user_profile_person_fkc foreign key (person_fk) references person;
alter table if exists physical_gear add constraint physical_gear_gear_fkc foreign key (gear_fk) references gear;
alter table if exists physical_gear add constraint physical_gear_parent_physical_gear_fkc foreign key (parent_physical_gear_fk) references physical_gear;
alter table if exists physical_gear add constraint physical_gear_program_fkc foreign key (program_fk) references program;
alter table if exists physical_gear add constraint physical_gear_quality_flag_fkc foreign key (quality_flag_fk) references quality_flag;
alter table if exists physical_gear add constraint physical_gear_recorder_department_fkc foreign key (recorder_department_fk) references department;
alter table if exists physical_gear add constraint physical_gear_recorder_person_fkc foreign key (recorder_person_fk) references person;
alter table if exists physical_gear add constraint physical_gear_trip_fkc foreign key (trip_fk) references trip;
alter table if exists physical_gear_measurement add constraint physical_gear_measurement_physical_gear_fkc foreign key (physical_gear_fk) references physical_gear;
alter table if exists physical_gear_measurement add constraint physical_gear_measurement_pmfm_fkc foreign key (pmfm_fk) references pmfm;
alter table if exists physical_gear_measurement add constraint physical_gear_measurement_qualitative_value_fkc foreign key (qualitative_value_fk) references qualitative_value;
alter table if exists physical_gear_measurement add constraint physical_gear_measurement_quality_flag_fkc foreign key (quality_flag_fk) references quality_flag;
alter table if exists physical_gear_measurement add constraint physical_gear_measurement_recorder_department_fkc foreign key (recorder_department_fk) references department;
alter table if exists pmfm add constraint pmfm_fraction_fkc foreign key (fraction_fk) references fraction;
alter table if exists pmfm add constraint pmfm_matrix_fkc foreign key (matrix_fk) references matrix;
alter table if exists pmfm add constraint pmfm_method_fkc foreign key (method_fk) references method;
alter table if exists pmfm add constraint pmfm_parameter_fkc foreign key (parameter_fk) references parameter;
alter table if exists pmfm add constraint pmfm_status_fkc foreign key (status_fk) references status;
alter table if exists pmfm add constraint pmfm_unit_fkc foreign key (unit_fk) references unit;
alter table if exists pmfm2qualitative_value add constraint pmfm2qualitative_value_qualitative_value_fkc foreign key (qualitative_value_fk) references qualitative_value;
alter table if exists pmfm2qualitative_value add constraint pmfm2qualitative_value_pmfm_fkc foreign key (pmfm_fk) references pmfm;
alter table if exists pmfm_applied_strategy add constraint pmfm_applied_strategy_applied_strategy_fkc foreign key (applied_strategy_fk) references applied_strategy;
alter table if exists pmfm_applied_strategy add constraint pmfm_applied_strategy_pmfm_fkc foreign key (pmfm_fk) references pmfm;
alter table if exists pmfm_strategy add constraint pmfm_strategy_acquisition_level_fkc foreign key (acquisition_level_fk) references acquisition_level;
alter table if exists pmfm_strategy add constraint pmfm_strategy_fraction_fkc foreign key (fraction_fk) references fraction;
alter table if exists pmfm_strategy add constraint pmfm_strategy_matrix_fkc foreign key (matrix_fk) references matrix;
alter table if exists pmfm_strategy add constraint pmfm_strategy_method_fkc foreign key (method_fk) references method;
alter table if exists pmfm_strategy add constraint pmfm_strategy_parameter_fkc foreign key (parameter_fk) references parameter;
alter table if exists pmfm_strategy add constraint pmfm_strategy_pmfm_fkc foreign key (pmfm_fk) references pmfm;
alter table if exists pmfm_strategy add constraint pmfm_strategy_strategy_fkc foreign key (strategy_fk) references strategy;
alter table if exists pmfm_strategy2gear add constraint pmfm_strategy2gear_gear_fkc foreign key (gear_fk) references gear;
alter table if exists pmfm_strategy2gear add constraint pmfm_strategy2gear_pmfm_strategy_fkc foreign key (pmfm_strategy_fk) references pmfm_strategy;
alter table if exists pmfm_strategy2reference_taxon add constraint pmfm_strategy2reference_taxon_reference_taxon_fkc foreign key (reference_taxon_fk) references reference_taxon;
alter table if exists pmfm_strategy2reference_taxon add constraint pmfm_strategy2reference_taxon_pmfm_strategy_fkc foreign key (pmfm_strategy_fk) references pmfm_strategy;
alter table if exists pmfm_strategy2taxon_group add constraint pmfm_strategy2taxon_group_taxon_group_fkc foreign key (taxon_group_fk) references taxon_group;
alter table if exists pmfm_strategy2taxon_group add constraint pmfm_strategy2taxon_group_pmfm_strategy_fkc foreign key (pmfm_strategy_fk) references pmfm_strategy;
alter table if exists processing_frequency add constraint processing_frequency_status_fkc foreign key (status_fk) references status;
alter table if exists processing_history add constraint processing_history_processing_status_fkc foreign key (processing_status_fk) references processing_status;
alter table if exists processing_history add constraint processing_history_processing_type_fkc foreign key (processing_type_fk) references processing_type;
alter table if exists processing_status add constraint processing_status_status_fkc foreign key (status_fk) references status;
alter table if exists processing_type add constraint processing_type_status_fkc foreign key (status_fk) references status;
alter table if exists product add constraint product_batch_fkc foreign key (batch_fk) references batch;
alter table if exists product add constraint product_dressing_fkc foreign key (dressing_fk) references qualitative_value;
alter table if exists product add constraint product_expected_sale_fkc foreign key (expected_sale_fk) references expected_sale;
alter table if exists product add constraint product_landing_fkc foreign key (landing_fk) references landing;
alter table if exists product add constraint product_operation_fkc foreign key (operation_fk) references operation;
alter table if exists product add constraint product_preservation_fkc foreign key (preservation_fk) references qualitative_value;
alter table if exists product add constraint product_quality_flag_fkc foreign key (quality_flag_fk) references quality_flag;
alter table if exists product add constraint product_recorder_department_fkc foreign key (recorder_department_fk) references department;
alter table if exists product add constraint product_recorder_person_fkc foreign key (recorder_person_fk) references person;
alter table if exists product add constraint product_sale_fkc foreign key (sale_fk) references sale;
alter table if exists product add constraint product_sale_type_fkc foreign key (sale_type_fk) references sale_type;
alter table if exists product add constraint product_size_category_fkc foreign key (size_category_fk) references qualitative_value;
alter table if exists product add constraint product_taxon_group_fkc foreign key (taxon_group_fk) references taxon_group;
alter table if exists product add constraint product_weight_method_fkc foreign key (weight_method_fk) references method;
alter table if exists program add constraint program_gear_classification_fkc foreign key (gear_classification_fk) references gear_classification;
alter table if exists program add constraint program_status_fkc foreign key (status_fk) references status;
alter table if exists program add constraint program_taxon_group_type_fkc foreign key (taxon_group_type_fk) references taxon_group_type;
alter table if exists program2department add constraint program2department_department_fkc foreign key (department_fk) references department;
alter table if exists program2department add constraint program2department_location_fkc foreign key (location_fk) references location;
alter table if exists program2department add constraint program2department_program_privilege_fkc foreign key (program_privilege_fk) references program_privilege;
alter table if exists program2department add constraint program2department_program_fkc foreign key (program_fk) references program;
alter table if exists program2location add constraint program2location_program_fkc foreign key (program_fk) references program;
alter table if exists program2location add constraint program2location_location_fkc foreign key (location_fk) references location;
alter table if exists program2location_classif add constraint program2location_classif_location_classification_fkc foreign key (location_classification_fk) references location_classification;
alter table if exists program2location_classif add constraint program2location_classif_program_fkc foreign key (program_fk) references program;
alter table if exists program2person add constraint program2person_location_fkc foreign key (location_fk) references location;
alter table if exists program2person add constraint program2person_person_fkc foreign key (person_fk) references person;
alter table if exists program2person add constraint program2person_program_privilege_fkc foreign key (program_privilege_fk) references program_privilege;
alter table if exists program2person add constraint program2person_program_fkc foreign key (program_fk) references program;
alter table if exists program2person add constraint program2person_reference_person_fkc foreign key (reference_person_fk) references person;
alter table if exists program_privilege add constraint program_privilege_status_fkc foreign key (status_fk) references status;
alter table if exists program_property add constraint program_property_program_fkc foreign key (program_fk) references program;
alter table if exists program_property add constraint program_property_status_fkc foreign key (status_fk) references status;
alter table if exists qualitative_value add constraint qualitative_value_parameter_fkc foreign key (parameter_fk) references parameter;
alter table if exists qualitative_value add constraint qualitative_value_status_fkc foreign key (status_fk) references status;
alter table if exists quality_flag add constraint quality_flag_status_fkc foreign key (status_fk) references status;
alter table if exists quantification_measurement_b add constraint quantification_measurement_b_batch_fkc foreign key (batch_fk) references batch;
alter table if exists quantification_measurement_b add constraint quantification_measurement_b_pmfm_fkc foreign key (pmfm_fk) references pmfm;
alter table if exists quantification_measurement_b add constraint quantification_measurement_b_qualitative_value_fkc foreign key (qualitative_value_fk) references qualitative_value;
alter table if exists quantification_measurement_b add constraint quantification_measurement_b_quality_flag_fkc foreign key (quality_flag_fk) references quality_flag;
alter table if exists quantification_measurement_b add constraint quantification_measurement_b_recorder_department_fkc foreign key (recorder_department_fk) references department;
alter table if exists quantification_measurement_p add constraint quantification_measurement_p_pmfm_fkc foreign key (pmfm_fk) references pmfm;
alter table if exists quantification_measurement_p add constraint quantification_measurement_p_product_fkc foreign key (product_fk) references product;
alter table if exists quantification_measurement_p add constraint quantification_measurement_p_qualitative_value_fkc foreign key (qualitative_value_fk) references qualitative_value;
alter table if exists quantification_measurement_p add constraint quantification_measurement_p_quality_flag_fkc foreign key (quality_flag_fk) references quality_flag;
alter table if exists quantification_measurement_p add constraint quantification_measurement_p_recorder_department_fkc foreign key (recorder_department_fk) references department;
alter table if exists reference_taxon_strategy add constraint reference_taxon_strategy_strategy_fkc foreign key (strategy_fk) references strategy;
alter table if exists reference_taxon_strategy add constraint reference_taxon_strategy_reference_taxon_fkc foreign key (reference_taxon_fk) references reference_taxon;
alter table if exists round_weight_conversion add constraint round_weight_conversion_dressing_fkc foreign key (dressing_fk) references qualitative_value;
alter table if exists round_weight_conversion add constraint round_weight_conversion_location_fkc foreign key (location_fk) references location;
alter table if exists round_weight_conversion add constraint round_weight_conversion_origin_item_type_fkc foreign key (origin_item_type_fk) references origin_item_type;
alter table if exists round_weight_conversion add constraint round_weight_conversion_preserving_fkc foreign key (preserving_fk) references qualitative_value;
alter table if exists round_weight_conversion add constraint round_weight_conversion_status_fkc foreign key (status_fk) references status;
alter table if exists round_weight_conversion add constraint round_weight_conversion_taxon_group_fkc foreign key (taxon_group_fk) references taxon_group;
alter table if exists sale add constraint sale_observed_location_fkc foreign key (observed_location_fk) references observed_location;
alter table if exists sale add constraint sale_program_fkc foreign key (program_fk) references program;
alter table if exists sale add constraint sale_quality_flag_fkc foreign key (quality_flag_fk) references quality_flag;
alter table if exists sale add constraint sale_recorder_department_fkc foreign key (recorder_department_fk) references department;
alter table if exists sale add constraint sale_recorder_person_fkc foreign key (recorder_person_fk) references person;
alter table if exists sale add constraint sale_sale_location_fkc foreign key (sale_location_fk) references location;
alter table if exists sale add constraint sale_sale_type_fkc foreign key (sale_type_fk) references sale_type;
alter table if exists sale add constraint sale_trip_fkc foreign key (trip_fk) references trip;
alter table if exists sale add constraint sale_vessel_fkc foreign key (vessel_fk) references vessel;
alter table if exists sale2observer_person add constraint sale2observer_person_person_fkc foreign key (person_fk) references person;
alter table if exists sale2observer_person add constraint sale2observer_person_sale_fkc foreign key (sale_fk) references sale;
alter table if exists sale_measurement add constraint sale_measurement_expected_sale_fkc foreign key (expected_sale_fk) references expected_sale;
alter table if exists sale_measurement add constraint sale_measurement_pmfm_fkc foreign key (pmfm_fk) references pmfm;
alter table if exists sale_measurement add constraint sale_measurement_qualitative_value_fkc foreign key (qualitative_value_fk) references qualitative_value;
alter table if exists sale_measurement add constraint sale_measurement_quality_flag_fkc foreign key (quality_flag_fk) references quality_flag;
alter table if exists sale_measurement add constraint sale_measurement_recorder_department_fkc foreign key (recorder_department_fk) references department;
alter table if exists sale_measurement add constraint sale_measurement_sale_fkc foreign key (sale_fk) references sale;
alter table if exists sale_type add constraint sale_type_status_fkc foreign key (status_fk) references status;
alter table if exists sample add constraint sample_batch_fkc foreign key (batch_fk) references batch;
alter table if exists sample add constraint sample_landing_fkc foreign key (landing_fk) references landing;
alter table if exists sample add constraint sample_matrix_fkc foreign key (matrix_fk) references matrix;
alter table if exists sample add constraint sample_operation_fkc foreign key (operation_fk) references operation;
alter table if exists sample add constraint sample_parent_sample_fkc foreign key (parent_sample_fk) references sample;
alter table if exists sample add constraint sample_program_fkc foreign key (program_fk) references program;
alter table if exists sample add constraint sample_quality_flag_fkc foreign key (quality_flag_fk) references quality_flag;
alter table if exists sample add constraint sample_recorder_department_fkc foreign key (recorder_department_fk) references department;
alter table if exists sample add constraint sample_recorder_person_fkc foreign key (recorder_person_fk) references person;
alter table if exists sample add constraint sample_reference_taxon_fkc foreign key (reference_taxon_fk) references reference_taxon;
alter table if exists sample add constraint sample_size_unit_fkc foreign key (size_unit_fk) references unit;
alter table if exists sample add constraint sample_taxon_group_fkc foreign key (taxon_group_fk) references taxon_group;
alter table if exists sample_measurement add constraint sample_measurement_pmfm_fkc foreign key (pmfm_fk) references pmfm;
alter table if exists sample_measurement add constraint sample_measurement_qualitative_value_fkc foreign key (qualitative_value_fk) references qualitative_value;
alter table if exists sample_measurement add constraint sample_measurement_quality_flag_fkc foreign key (quality_flag_fk) references quality_flag;
alter table if exists sample_measurement add constraint sample_measurement_recorder_department_fkc foreign key (recorder_department_fk) references department;
alter table if exists sample_measurement add constraint sample_measurement_sample_fkc foreign key (sample_fk) references sample;
alter table if exists software add constraint software_status_fkc foreign key (status_fk) references status;
alter table if exists software_property add constraint software_property_software_fkc foreign key (software_fk) references software;
alter table if exists software_property add constraint software_property_status_fkc foreign key (status_fk) references status;
alter table if exists sorting_measurement_b add constraint sorting_measurement_b_batch_fkc foreign key (batch_fk) references batch;
alter table if exists sorting_measurement_b add constraint sorting_measurement_b_pmfm_fkc foreign key (pmfm_fk) references pmfm;
alter table if exists sorting_measurement_b add constraint sorting_measurement_b_qualitative_value_fkc foreign key (qualitative_value_fk) references qualitative_value;
alter table if exists sorting_measurement_b add constraint sorting_measurement_b_quality_flag_fkc foreign key (quality_flag_fk) references quality_flag;
alter table if exists sorting_measurement_b add constraint sorting_measurement_b_recorder_department_fkc foreign key (recorder_department_fk) references department;
alter table if exists sorting_measurement_p add constraint sorting_measurement_p_pmfm_fkc foreign key (pmfm_fk) references pmfm;
alter table if exists sorting_measurement_p add constraint sorting_measurement_p_product_fkc foreign key (product_fk) references product;
alter table if exists sorting_measurement_p add constraint sorting_measurement_p_qualitative_value_fkc foreign key (qualitative_value_fk) references qualitative_value;
alter table if exists sorting_measurement_p add constraint sorting_measurement_p_quality_flag_fkc foreign key (quality_flag_fk) references quality_flag;
alter table if exists sorting_measurement_p add constraint sorting_measurement_p_recorder_department_fkc foreign key (recorder_department_fk) references department;
alter table if exists strategy add constraint strategy_program_fkc foreign key (program_fk) references program;
alter table if exists strategy add constraint strategy_status_fkc foreign key (status_fk) references status;
alter table if exists strategy2department add constraint strategy2department_department_fkc foreign key (department_fk) references department;
alter table if exists strategy2department add constraint strategy2department_location_fkc foreign key (location_fk) references location;
alter table if exists strategy2department add constraint strategy2department_program_privilege_fkc foreign key (program_privilege_fk) references program_privilege;
alter table if exists strategy2department add constraint strategy2department_strategy_fkc foreign key (strategy_fk) references strategy;
alter table if exists strategy2gear add constraint strategy2gear_gear_fkc foreign key (gear_fk) references gear;
alter table if exists strategy2gear add constraint strategy2gear_strategy_fkc foreign key (strategy_fk) references strategy;
alter table if exists survey_measurement add constraint survey_measurement_landing_fkc foreign key (landing_fk) references landing;
alter table if exists survey_measurement add constraint survey_measurement_pmfm_fkc foreign key (pmfm_fk) references pmfm;
alter table if exists survey_measurement add constraint survey_measurement_qualitative_value_fkc foreign key (qualitative_value_fk) references qualitative_value;
alter table if exists survey_measurement add constraint survey_measurement_quality_flag_fkc foreign key (quality_flag_fk) references quality_flag;
alter table if exists survey_measurement add constraint survey_measurement_recorder_department_fkc foreign key (recorder_department_fk) references department;
alter table if exists taxon_group add constraint taxon_group_parent_taxon_group_fkc foreign key (parent_taxon_group_fk) references taxon_group;
alter table if exists taxon_group add constraint taxon_group_status_fkc foreign key (status_fk) references status;
alter table if exists taxon_group add constraint taxon_group_taxon_group_type_fkc foreign key (taxon_group_type_fk) references taxon_group_type;
alter table if exists taxon_group2taxon_hierarchy add constraint taxon_group2taxon_hierarchy_parent_taxon_group_fkc foreign key (parent_taxon_group_fk) references taxon_group;
alter table if exists taxon_group2taxon_hierarchy add constraint taxon_group2taxon_hierarchy_child_reference_taxon_fkc foreign key (child_reference_taxon_fk) references reference_taxon;
alter table if exists taxon_group_hierarchy add constraint taxon_group_hierarchy_child_taxon_group_fkc foreign key (child_taxon_group_fk) references taxon_group;
alter table if exists taxon_group_hierarchy add constraint taxon_group_hierarchy_parent_taxon_group_fkc foreign key (parent_taxon_group_fk) references taxon_group;
alter table if exists taxon_group_historical_record add constraint taxon_group_historical_record_reference_taxon_fkc foreign key (reference_taxon_fk) references reference_taxon;
alter table if exists taxon_group_historical_record add constraint taxon_group_historical_record_taxon_group_fkc foreign key (taxon_group_fk) references taxon_group;
alter table if exists taxon_group_strategy add constraint taxon_group_strategy_strategy_fkc foreign key (strategy_fk) references strategy;
alter table if exists taxon_group_strategy add constraint taxon_group_strategy_taxon_group_fkc foreign key (taxon_group_fk) references taxon_group;
alter table if exists taxon_group_type add constraint taxon_group_type_status_fkc foreign key (status_fk) references status;
alter table if exists taxon_name add constraint taxon_name_parent_taxon_name_fkc foreign key (parent_taxon_name_fk) references taxon_name;
alter table if exists taxon_name add constraint taxon_name_reference_taxon_fkc foreign key (reference_taxon_fk) references reference_taxon;
alter table if exists taxon_name add constraint taxon_name_status_fkc foreign key (status_fk) references status;
alter table if exists taxon_name add constraint taxon_name_taxonomic_level_fkc foreign key (taxonomic_level_fk) references taxonomic_level;
alter table if exists taxonomic_level add constraint taxonomic_level_status_fkc foreign key (status_fk) references status;
alter table if exists transcribing_item add constraint transcribing_item_status_fkc foreign key (status_fk) references status;
alter table if exists transcribing_item add constraint transcribing_item_transcribing_item_type_fkc foreign key (transcribing_item_type_fk) references transcribing_item_type;
alter table if exists transcribing_item_type add constraint transcribing_item_type_object_type_fkc foreign key (object_type_fk) references object_type;
alter table if exists transcribing_item_type add constraint transcribing_item_type_status_fkc foreign key (status_fk) references status;
alter table if exists transcribing_item_type add constraint transcribing_item_type_transcribing_system_fkc foreign key (transcribing_system_fk) references transcribing_system;
alter table if exists transcribing_system add constraint transcribing_system_status_fkc foreign key (status_fk) references status;
alter table if exists trip add constraint trip_departure_location_fkc foreign key (departure_location_fk) references location;
alter table if exists trip add constraint trip_program_fkc foreign key (program_fk) references program;
alter table if exists trip add constraint trip_quality_flag_fkc foreign key (quality_flag_fk) references quality_flag;
alter table if exists trip add constraint trip_recorder_department_fkc foreign key (recorder_department_fk) references department;
alter table if exists trip add constraint trip_recorder_person_fkc foreign key (recorder_person_fk) references person;
alter table if exists trip add constraint trip_return_location_fkc foreign key (return_location_fk) references location;
alter table if exists trip add constraint trip_vessel_fkc foreign key (vessel_fk) references vessel;
alter table if exists trip2observer_person add constraint trip2observer_person_person_fkc foreign key (person_fk) references person;
alter table if exists trip2observer_person add constraint trip2observer_person_trip_fkc foreign key (trip_fk) references trip;
alter table if exists unit add constraint unit_status_fkc foreign key (status_fk) references status;
alter table if exists unit_conversion add constraint unit_conversion_from_unit_fkc foreign key (from_unit_fk) references unit;
alter table if exists unit_conversion add constraint unit_conversion_to_unit_fkc foreign key (to_unit_fk) references unit;
alter table if exists user_interaction add constraint user_interaction_object_type_fkc foreign key (object_type_fk) references object_type;
alter table if exists user_profile add constraint user_profile_status_fkc foreign key (status_fk) references status;
alter table if exists vessel add constraint vessel_program_fkc foreign key (program_fk) references program;
alter table if exists vessel add constraint vessel_quality_flag_fkc foreign key (quality_flag_fk) references quality_flag;
alter table if exists vessel add constraint vessel_recorder_department_fkc foreign key (recorder_department_fk) references department;
alter table if exists vessel add constraint vessel_recorder_person_fkc foreign key (recorder_person_fk) references person;
alter table if exists vessel add constraint vessel_status_fkc foreign key (status_fk) references status;
alter table if exists vessel add constraint vessel_vessel_type_fkc foreign key (vessel_type_fk) references vessel_type;
alter table if exists vessel_features add constraint vessel_features_base_port_location_fkc foreign key (base_port_location_fk) references location;
alter table if exists vessel_features add constraint vessel_features_hull_material_qv_fkc foreign key (hull_material_qv_fk) references qualitative_value;
alter table if exists vessel_features add constraint vessel_features_quality_flag_fkc foreign key (quality_flag_fk) references quality_flag;
alter table if exists vessel_features add constraint vessel_features_recorder_department_fkc foreign key (recorder_department_fk) references department;
alter table if exists vessel_features add constraint vessel_features_recorder_person_fkc foreign key (recorder_person_fk) references person;
alter table if exists vessel_features add constraint vessel_features_vessel_fkc foreign key (vessel_fk) references vessel;
alter table if exists vessel_owner add constraint vessel_owner_country_location_fkc foreign key (country_location_fk) references location;
alter table if exists vessel_owner add constraint vessel_owner_program_fkc foreign key (program_fk) references program;
alter table if exists vessel_owner_period add constraint vessel_owner_period_vessel_owner_fkc foreign key (vessel_owner_fk) references vessel_owner;
alter table if exists vessel_owner_period add constraint vessel_owner_period_vessel_fkc foreign key (vessel_fk) references vessel;
alter table if exists vessel_physical_measurement add constraint vessel_physical_measurement_pmfm_fkc foreign key (pmfm_fk) references pmfm;
alter table if exists vessel_physical_measurement add constraint vessel_physical_measurement_qualitative_value_fkc foreign key (qualitative_value_fk) references qualitative_value;
alter table if exists vessel_physical_measurement add constraint vessel_physical_measurement_quality_flag_fkc foreign key (quality_flag_fk) references quality_flag;
alter table if exists vessel_physical_measurement add constraint vessel_physical_measurement_recorder_department_fkc foreign key (recorder_department_fk) references department;
alter table if exists vessel_physical_measurement add constraint vessel_physical_measurement_vessel_features_fkc foreign key (vessel_features_fk) references vessel_features;
alter table if exists vessel_position add constraint vessel_position_operation_fkc foreign key (operation_fk) references operation;
alter table if exists vessel_position add constraint vessel_position_quality_flag_fkc foreign key (quality_flag_fk) references quality_flag;
alter table if exists vessel_position add constraint vessel_position_recorder_department_fkc foreign key (recorder_department_fk) references department;
alter table if exists vessel_registration_period add constraint vessel_registration_period_quality_flag_fkc foreign key (quality_flag_fk) references quality_flag;
alter table if exists vessel_registration_period add constraint vessel_registration_period_registration_location_fkc foreign key (registration_location_fk) references location;
alter table if exists vessel_registration_period add constraint vessel_registration_period_vessel_fkc foreign key (vessel_fk) references vessel;
alter table if exists vessel_type add constraint vessel_type_status_fkc foreign key (status_fk) references status;
alter table if exists vessel_use_measurement add constraint vessel_use_measurement_operation_fkc foreign key (operation_fk) references operation;
alter table if exists vessel_use_measurement add constraint vessel_use_measurement_pmfm_fkc foreign key (pmfm_fk) references pmfm;
alter table if exists vessel_use_measurement add constraint vessel_use_measurement_qualitative_value_fkc foreign key (qualitative_value_fk) references qualitative_value;
alter table if exists vessel_use_measurement add constraint vessel_use_measurement_quality_flag_fkc foreign key (quality_flag_fk) references quality_flag;
alter table if exists vessel_use_measurement add constraint vessel_use_measurement_recorder_department_fkc foreign key (recorder_department_fk) references department;
alter table if exists vessel_use_measurement add constraint vessel_use_measurement_trip_fkc foreign key (trip_fk) references trip;
alter table if exists virtual_component add constraint virtual_component_taxon_name_fkc foreign key (taxon_name_fk) references taxon_name;
alter table if exists virtual_component add constraint virtual_component_reference_taxon_fkc foreign key (reference_taxon_fk) references reference_taxon;
alter table if exists weight_length_conversion add constraint weight_length_conversion_length_parameter_fkc foreign key (length_parameter_fk) references parameter;
alter table if exists weight_length_conversion add constraint weight_length_conversion_length_unit_fkc foreign key (length_unit_fk) references unit;
alter table if exists weight_length_conversion add constraint weight_length_conversion_location_fkc foreign key (location_fk) references location;
alter table if exists weight_length_conversion add constraint weight_length_conversion_origin_item_type_fkc foreign key (origin_item_type_fk) references origin_item_type;
alter table if exists weight_length_conversion add constraint weight_length_conversion_reference_taxon_fkc foreign key (reference_taxon_fk) references reference_taxon;
alter table if exists weight_length_conversion add constraint weight_length_conversion_sex_qualitative_value_fkc foreign key (sex_qualitative_value_fk) references qualitative_value;
alter table if exists weight_length_conversion add constraint weight_length_conversion_status_fkc foreign key (status_fk) references status;
